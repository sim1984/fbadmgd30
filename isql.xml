<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.1" xml:id="isql" xml:lang="ru">
    <info>
        <title>ISQL. Интерактивные запросы</title>
    </info>

    <indexterm>
        <primary>ISQL</primary>
    </indexterm>

    <para>В этой главе содержится описание консольной утилиты Firebird Interactive SQL Utility
            (<application>isql</application>) и инструкции по его использованию для выполнения задач
        в базе данных.</para>

    <para>Утилита ISQL расположена в корневом каталоге установки Firebird. Она предоставляет
        интерфейс командной строки для интерактивного доступа к базе данных Firebird. ISQL принимает
        операторы DSQL вместе с группой команд SET и SHOW для запросов и взаимодействия с базой
        данных Firebird. Некоторые команды SET могут быть включены в сценарии DDL для выполнения
        пакетных операций в <application>isql</application>. Она также обрабатывает команды DDL, DML
        и консоли.</para>

    <para>Утилита <application>isql</application> может использоваться в трех режимах: в качестве
        интерактивного сеанса; прямо из командной строки; и как неинтерактивный сеанс, используя
        сценарий оболочки или пакетный файл. В каждом из режимов могут выполняться разные задачи,
        как показано ниже: <itemizedlist>
            <listitem>
                <para>В интерактивном режиме пользователь последовательно вводит команды для работы
                    с базами данных и тут же получает результат их выполнения. При этом одна команда
                    может быть разбита на несколько строк. После завершения обработки каждой команды
                    и вывода всех результатов её работы пользователь получает приглашение ввести
                    следующую команду до тех пор, пока не будет введена команда выхода из
                    интерактивного режима QUIT или EXIT. Isql можно использовать в интерактивном
                    режиме для:<itemizedlist spacing="compact">
                        <listitem>
                            <para>Создания, редактирования, удаления или просмотра данных и
                                метаданных;</para>
                        </listitem>
                        <listitem>
                            <para>Ввода файла сценария содержащего пакет SQL запросов;</para>
                        </listitem>
                        <listitem>
                            <para>Добавлять и модифицировать данные;</para>
                        </listitem>
                        <listitem>
                            <para>Предоставлять разрешение пользователю и отбирать их;</para>
                        </listitem>
                        <listitem>
                            <para>Управлять учётными записями;</para>
                        </listitem>
                        <listitem>
                            <para>Выполнять административные функции базы данных.</para>
                        </listitem>
                    </itemizedlist></para>
            </listitem>
            <listitem>
                <para>Непосредственно из командной строки, с отдельными параметрами и без запуска
                    интерактивного сеанса. Команды выполняются и по завершении возвращают управление
                    автоматически операционной системе.</para>
            </listitem>
            <listitem>
                <para>В неинтерактивном сеансе пользователь использует сценарий оболочки или
                    пакетный файл для выполнения функций базы данных.</para>
            </listitem>
        </itemizedlist></para>

    <note>
        <para>Поскольку другие приложения в среде Linux, например mySQL, также используют isql в
            качестве имени утилиты, рекомендуется запускать утилиту Firebird из ее собственного
            каталога или указывать абсолютный путь к файлу, если у вас есть другая реляционная база
            данных, кроме Firebird, установленная на вашей машине.</para>
    </note>

    <note>
        <para>Некоторые из затронутых дистрибутивов, такие как Mint Linux — на основе Ubuntu —
            переименовали Firebird в isql в isql-fb. Аналогичные изменения могут быть и в других
            дистрибутивах.</para>

        <para>Кроме того, не все дистрибутивы устанавливают Firebird в одно и то же место. Например,
            OpenSuse устанавливает практически все в <filename>/opt/firebird/3.0</filename>, но
            Ubuntu и его производные устанавливают его в различные места, но утилиты находятся в
                <filename>/usr/bin</filename>.</para>

        <para>Далее предполагается что утилита называется isql.</para>
    </note>

    <section xml:id="isql-invoking">
        <title>Запуск isql</title>

        <para>Перейдите в корневой каталог установки сервера Firebird и введите в командной строке
                <filename>isql</filename> (Windows) или <filename>./isql</filename> (Linux). Если
            каталог с isql добавлен в PATH, то нет необходимости переходить в него. </para>
        <para>Синтаксис запуска isql следующий:
            <programlisting>
isql [<replaceable>&lt;options&gt;</replaceable>] [<replaceable>&lt;database&gt;</replaceable>]  
                
<replaceable>&lt;database&gt;</replaceable> ::= [<replaceable>&lt;server spec&gt;</replaceable>] {<replaceable>&lt;db_filename&gt;</replaceable> | <replaceable>&lt;db_alias&gt;</replaceable>}  
                
<replaceable>&lt;server spec&gt;</replaceable> ::= 
    <replaceable>&lt;host&gt;</replaceable>[\{<replaceable>&lt;port&gt;</replaceable> | <replaceable>&lt;service&gt;</replaceable>}]:       
  | \\<replaceable>&lt;host&gt;</replaceable>[@{<replaceable>&lt;port&gt;</replaceable> | <replaceable>&lt;service&gt;</replaceable>}]\     
  | <replaceable>&lt;protocol&gt;</replaceable>://[<replaceable>&lt;host&gt;</replaceable>[:{<replaceable>&lt;port&gt;</replaceable> | <replaceable>&lt;service&gt;</replaceable>}]/]  
                
<replaceable>&lt;protocol&gt;</replaceable> ::= inet | inet4 | inet6 | wnet | xnet                
        </programlisting>
        </para>
        <para>Если параметры <replaceable>&lt;options&gt;</replaceable> не указаны,
                <application>isql</application> запускает интерактивный сеанс. Если база данных не
            указана, то необходимо подключиться к существующей базе данных или создать новую. Если
            база данных была указана, <application>isql</application> запускает интерактивный сеанс,
            подключаясь к указанной базе данных.</para>

        <para>Если указаны параметры, <application>isql</application> запускается в интерактивном
            или не интерактивном режиме, в зависимости от параметров. Например, чтение входного
            файла и запись в выходной файл являются не интерактивными задачами, поэтому параметры
            -input или -output не запускают интерактивный сеанс. Дополнительные не интерактивные
            параметры включают -a, -database, -extract и -x, которые используются при извлечении
            операторов DDL.</para>

        <para>Когда вы запускаете интерактивный сеанс isql, появляется следующее приглашение:
            <screen>
SQL>            
        </screen>
        </para>

        <para>Вы должны завершить каждую команду символом-терминатором. Терминатором по умолчанию
            является точка с запятой (;). Вы можете изменить терминатор на любой символ или группу
            символов с помощью команды SET TERMINATOR или с помощью параметра командной строки
            -terminator. Если вы опустите терминатор, появится приглашение для продолжения ввода
            (CON>).</para>

        <para>Ниже приведен самый простой способ запуска isql. После перехода в интерактивный режим
            вы должны начать с создания новой базы данных или подключения к ней. Сообщение, выданное
            isql, является подсказкой относительно того, что вы должны делать дальше. <programlisting>
<![CDATA[            
c:\Firebird\3.0>isql

Use CONNECT or CREATE DATABASE to specify a database
SQL> CONNECT "inet://localhost:3053/employee"
CON> user "SYSDBA" password 'masterkey';
Database: "inet://localhost:3053/employee", User: SYSDBA
SQL>    
]]>
        </programlisting>
        </para>

        <para>В следующем примере показано, как передать имя базы данных и учетные данные
            пользователя в командной строке. <programlisting>
<![CDATA[            
c:\Firebird\3.0>isql -user sysdba -password masterkey "inet://localhost:3053/employee"

Database: inet://localhost:3053/employee, User: SYSDBA
SQL>
]]>
        </programlisting>
        </para>

        <para>В этом примере мы использовали псевдоним для базы данных employee. Этот пример
            предопределен в файле <filename>databases.conf</filename>, который обычно находится в
            каталоге, в котором установлен Firebird, но некоторые дистрибутивы Linux помещают его в
                <filename>/etc/firebird/n.n</filename>, где n.n - версия сервера базы данных
            Firebird. Ниже приведена дополнительная информация о подключении к базам данных с
            использованием полных путей или псевдонимов.</para>
    </section>

    <section xml:id="isql-switches">
        <title>Переключатели командной строки</title>

        <para>Переключатели командной строки — это аргументы, которые начинаются с символа
            минус/дефис (-). Ниже приведен пример того, что происходит, когда вы пытаетесь запустить
            isql с недопустимым переключателем — он отображает список допустимых ключей с кратким
            описанием каждого из них. <programlisting>
<![CDATA[
c:\Firebird\3.0>isql -help
Unknown switch: -help
usage:    isql [options] [<database>]
        -a(ll)                  extract metadata incl. legacy non-SQL tables
        -b(ail)                 bail on errors (set bail on)
        -c(ache) <num>          number of cache buffers
        -ch(arset) <charset>    connection charset (set names)
        -d(atabase) <database>  database name to put in script creation
        -e(cho)                 echo commands (set echo on)
        -ex(tract)              extract metadata
        -f(etch_password)       fetch password from file
        -i(nput) <file>         input file (set input)
        -m(erge)                merge standard error
        -m2                     merge diagnostic
        -n(oautocommit)         no autocommit DDL (set autoddl off)
        -nod(btriggers)         do not run database triggers
        -now(arnings)           do not show warnings
        -o(utput) <file>        output file (set output)
        -pag(elength) <size>    page length
        -p(assword) <password>  connection password
        -q(uiet)                do not show the message "Use CONNECT..."
        -r(ole) <role>          role name
        -r2 <role>              role (uses quoted identifier)
        -s(qldialect) <dialect> SQL dialect (set sql dialect)
        -t(erminator) <term>    command terminator (set term)
        -tr(usted)              use trusted authentication
        -u(ser) <user>          user name
        -x                      extract metadata
        -z                      show program and server version
]]>                        
        </programlisting>
        </para>

        <note>
            <para>Требуются только начальные символы в опции. Вы можете ввести любую часть текста,
                заключенную в скобки, включая полное имя опции. Например, указание -n, -no или
                -noauto имеет тот же эффект.</para>
        </note>

        <para>
            <table frame="topbot">
                <title>Переключатели командной строки</title>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1" colwidth="0.5*"/>
                    <colspec colname="c2" colnum="2" colwidth="1.4*"/>
                    <thead>
                        <row>
                            <entry>Опции</entry>
                            <entry>Описание</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>-a(ll)</entry>
                            <entry><para>Извлечение всех метаданных, включая не-SQL объекты.
                                    Используется совместно с командой extract</para></entry>
                        </row>
                        <row>
                            <entry>-b(ail)</entry>
                            <entry><para>Этот переключатель указывает утилите передать ошибку в ОС,
                                    но только в пакетном режиме (<code>SET BAIL ON</code>). Он был
                                    добавлен, чтобы предотвратить выполнение сценариев isql после
                                    обнаружения ошибки. Дальнейшие операторы не будут выполняться, и
                                    isql вернет код ошибки в ОС.</para>
                                <para>Пользователям по-прежнему необходимо использовать
                                    переключатель — e(cho) для вывода команд в выходной файл, чтобы
                                    выделить точный оператор, вызвавший ошибку.</para>
                                <para>Когда сервер предоставляет информацию о строках и столбцах,
                                    пользователи могут найти точную строку в DML скрипте, вызвавшую
                                    проблему. Когда сервер указывает только ошибку, то пользователи
                                    могут увидеть только первую строку оператора, вызвавшего сбой по
                                    отношению ко сему сценарию.</para>
                                <para>Эта функция также поддерживается во вложенных скриптах.
                                    Например, сценарий A включает в себя сценарий B, а сценарий B
                                    вызывает ошибку, номер строки связан со сценарием B. Когда
                                    сценарий B полностью прочитан, <application>isql</application>
                                    продолжает считать строки, относящиеся к сценарию A, поскольку
                                    каждый файл получает отдельный счетчик строк. Сценарий A
                                    включает сценарий B, когда сценарий A использует команду
                                        <code>INPUT</code> для загрузки сценария B.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>-c(ache) <replaceable>&lt;num&gt;</replaceable></entry>
                            <entry>Задаёт количество страниц, которые будут кэшированы при
                                соединении с БД.</entry>
                        </row>
                        <row>
                            <entry>-ch(arset) <replaceable>&lt;charset&gt;</replaceable></entry>
                            <entry>Задаёт кодировку для текущего соединения. Это же можно сделать с
                                использовании команды <code>SET NAMES</code></entry>
                        </row>
                        <row>
                            <entry>-d(atabase) <replaceable>&lt;database&gt;</replaceable></entry>
                            <entry><para>Используется совместно с переключателем -x или -ex.
                                    Изменяет оператор CREATE DATABASE, который извлекается в файл:<itemizedlist>
                                        <listitem>
                                            <para>Без переключателя -d оператор CREATE DATABASE
                                                извлекается в скрипт как комментарий в стиле C, и
                                                использует имя базы данных указанное в командной
                                                строке isql</para>
                                        </listitem>
                                        <listitem>
                                            <para>С переключателем -d оператор CREATE DATABASE
                                                извлекается не закомментированным, и подставляет имя
                                                базы данных указанное в переключателе</para>
                                        </listitem>
                                    </itemizedlist></para></entry>
                        </row>
                        <row>
                            <entry>-e(cho) </entry>
                            <entry>Включает дублирование команд на указанное устройство вывода
                                (монитор, в файл, и т. д.) Это можно сделать и с использованием
                                команды <code>SET ECHO ON</code></entry>
                        </row>
                        <row>
                            <entry>-ex(tract)</entry>
                            <entry>Извлечение метаданных из базы данных. Его можно использовать
                                вместе с ключом -o(utput) для извлечения информации в указанный
                                выходной файл.</entry>
                        </row>
                        <row>
                            <entry>-f(etch_password) </entry>
                            <entry>Извлечение пароля из файла</entry>
                        </row>
                        <row>
                            <entry>-i(nput) <replaceable>&lt;file&gt;</replaceable>
                            </entry>
                            <entry>Задаёт файл с SQL-скриптом для выполнения. Файлы скриптов могут
                                содержать команду <code>SET INPUT</code> для включения других
                                файлов.</entry>
                        </row>
                        <row>
                            <entry>-m(erge_stderr) </entry>
                            <entry>Перенаправление ошибок (stderr) на поток стандартного вывода.
                                Ключ командной строки -m(erge) может использоваться для включения
                                сообщений об ошибках в выходные файлы.</entry>
                        </row>
                        <row>
                            <entry>-m2 </entry>
                            <entry>Отправлять информацию о статистике и планах в выходной файл,
                                который указан в переключателе -o(utput). Ключ командной строки -m2
                                гарантирует, что статистика и информация о плане, полученные из
                                команд <code>SET STATS</code>, <code>SET PLAN</code> и <code>SET
                                    PLANONLY</code>, также отправляются в выходной файл, а не просто
                                возвращаются в консоль.</entry>
                        </row>
                        <row>
                            <entry>-n(oautocommit)</entry>
                            <entry>Отключить автоматическое подтверждение DDL-операций. По умолчанию
                                операторы DDL фиксируются автоматически в отдельной транзакции.
                                Может быть изменено командой <code>SET AUTODDL OFF</code></entry>
                        </row>
                        <row>
                            <entry>-nod(btriggers)</entry>
                            <entry>Не запускать триггеры базы данных.</entry>
                        </row>
                        <row>
                            <entry>-now(arnings)</entry>
                            <entry>Не показывать предупреждения.</entry>
                        </row>
                        <row>
                            <entry>-o(utput) <replaceable>&lt;file&gt;</replaceable></entry>
                            <entry>Задаёт файл для вывода результата выполнения запросов. Без
                                аргументов перенаправляет вывод на стандартное устройство вывода
                                (монитор). Может быть изменён так же командой <code>SET
                                    OUTPUT</code></entry>
                        </row>
                        <row>
                            <entry>-pag(elength) <replaceable>&lt;size&gt;</replaceable></entry>
                            <entry>Размер страницы. Печатает заголовки столбцов каждые
                                    <replaceable>&lt;size&gt;</replaceable> строк вместо значений по
                                умолчанию 20.</entry>
                        </row>
                        <row>
                            <entry>-p(assword) <replaceable>&lt;password&gt;</replaceable></entry>
                            <entry>Пароль пользователя при подключении к базе данных.</entry>
                        </row>
                        <row>
                            <entry>-q(uiet)</entry>
                            <entry>Не показывать сообщение "Use CONNECT...".</entry>
                        </row>
                        <row>
                            <entry>-r(ole) <replaceable>&lt;role&gt;</replaceable></entry>
                            <entry>Имя роли при подключении к базе данных.</entry>
                        </row>
                        <row>
                            <entry>-r2 <replaceable>&lt;role&gt;</replaceable></entry>
                            <entry><para>Имя роли (с использованием квотированных идентификаторов).
                                    Этот переключатель можно использовать для указания имени роли с
                                    учетом регистра. </para>
                                <para>По умолчанию для передачи роли используется переключатель
                                    -r(ole). В этом случае роль, представленная в командной строке,
                                    пишется в верхнем регистре. Если используется переключатель -r2,
                                    то роль передаются в движок в точности так, как это указано в
                                    командной строке.</para></entry>
                        </row>
                        <row>
                            <entry>-s(qldialect) <replaceable>&lt;dialect&gt;</replaceable></entry>
                            <entry>Устанавливает SQL диалект к котором интерпретируются последующие
                                команды до конца сеанса или до тех пор, пока диалект не будет
                                изменён с помощью инструкции <code>SET SQL DIALECT</code>.</entry>
                        </row>
                        <row>
                            <entry>-t(erminator) <replaceable>&lt;term&gt;</replaceable></entry>
                            <entry>Изменяет символ конца оператора (терминатора) с точки с запятой
                                    <quote>;</quote> по умолчанию на
                                    <replaceable>&lt;term&gt;</replaceable>, где
                                    <replaceable>&lt;term&gt;</replaceable> — любой символ или
                                последовательность символов. Тоже самое можно сделать использую
                                команду <code>SET TERM</code>.</entry>
                        </row>
                        <row>
                            <entry>-tr(usted)</entry>
                            <entry>Использовать доверительную аутентификацию.</entry>
                        </row>
                        <row>
                            <entry>-u(ser) <replaceable>&lt;user&gt;</replaceable></entry>
                            <entry>Имя пользователя для подключения к базе данных.</entry>
                        </row>
                        <row>
                            <entry>-x</entry>
                            <entry>Извлечение метаданных из базы данных. Его можно использовать
                                вместе с ключом -o(utput) для извлечения информации в указанный
                                выходной файл.</entry>
                        </row>
                        <row>
                            <entry>-z</entry>
                            <entry>Показать версии утилиты и сервера.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

        <section xml:id="isql-switches-examples">
            <title>Примеры</title>

            <para>
                <example>
                    <title>Выполнение скрипта создания базы данных</title>

                    <para>
                        <programlisting>
isql -input createdb.sql                            
                        </programlisting>
                    </para>
                </example>
                <example>
                    <title>Запуск интерактивного сеанса с подключением к удалённой базе
                        данных</title>

                    <para>В следующем примере начинается интерактивное соединение с удаленной базой
                        данных. Удаленный сервер jupiter, принимает указанную комбинацию
                        пользователя и пароля с привилегиями, назначенными роли STAFF:
                        <programlisting>
isql -user sales -password mycode -role staff 'jupiter:/usr/customer.fdb'                            
                        </programlisting>
                    </para>
                </example>
                <example>
                    <title>Запуск интерактивного сеанса без подключения к базе данных</title>

                    <para>Следующий пример запускает интерактивный сеанс, но не подключается к базе
                        данных. Все введенные команды <application>isql</application> выводятся на
                        печать, а результаты запроса печатают заголовки столбцов каждые 30 строк:
                        <programlisting>
isql -echo -page 30                            
                        </programlisting>
                    </para>
                </example>
            </para>
        </section>
    </section>
    <section xml:id="isql-start_session">
        <title>Начало сессии Isql</title>

        <para>Чтобы начать сеанс <application>isql</application>, введите параметры командной строки
            и имя базы данных в оболочке Linux/Unix или командной консоли Windows. Например:
            <programlisting>
isql [<replaceable>&lt;options&gt;</replaceable>] [<replaceable>&lt;database&gt;</replaceable>]                          
                        </programlisting>
        </para>

        <note>
            <para>При подключении к удаленной базе данных вам нужно будет включить соответствующие
                параметры -user и -password в свои параметры, если только пользователи не объявили
                ISC_USER и ISC_PASSWORD в качестве переменных операционной системы. Например:
                <programlisting>
isql -user SYSDBA -password masterkey inet4://localhost/mydatabase                            
                        </programlisting>
            </para>
            <para>При подключении к локальной базе данных в embedded варианте достаточно указать
                только имя пользователя (пароль будет проигнорирован):
                <programlisting>
isql -user SYSDBA employee.db                           
                        </programlisting>
            </para>
            <para>В Windows вы можете использовать доверительную аутентификацию, при условии что она
                настроена в <filename>firebird.conf</filename> или
                    <filename>databases.conf</filename>:
                <programlisting>
isql -trusted inet4://localhost/mydatabase                            
                        </programlisting>
            </para>
        </note>
        <para>Если параметры <replaceable>&lt;options&gt;</replaceable> не указаны,
                <application>isql</application> запускает интерактивный сеанс. Если база данных не
            указана, то необходимо подключиться к существующей базе данных или создать новую. Если
            база данных была указана, <application>isql</application> запускает интерактивный сеанс,
            подключаясь к указанной базе данных.</para>

        <para>Чтение входного файла и запись в выходной файл не считаются интерактивными задачами,
            поэтому параметры командной строки -input или -output не инициируют интерактивный сеанс.
            Опции, используемые для извлечения операторов DDL, такие как -a и -x, также инициируют
            только неинтерактивный сеанс.</para>

        <para>Isql может быть запущен с локального или удаленного клиента:<itemizedlist>
                <listitem>
                    <para>При подключении с использованием локального клиента вы можете установить
                        переменные среды ISC_USER и ISC_PASSWORD.</para>
                </listitem>
                <listitem>
                    <para>При подключении с удаленного клиента вам потребуется указать
                        действительные имя и пароль.</para>
                </listitem>
            </itemizedlist></para>
    </section>
    <section xml:id="isql-end_session">
        <title>Завершение сессии Isql</title>

        <indexterm>
            <primary>ISQL</primary>
            <secondary>QUIT</secondary>
        </indexterm>
        <indexterm>
            <primary>ISQL</primary>
            <secondary>EXIT</secondary>
        </indexterm>

        <para>Существует два способа выхода из isql:<itemizedlist>
                <listitem>
                    <para>Если вы хотите откатить всю неподтвержденную работу и выйти из isql,
                        введите в командной строке следующую команду:
                        <programlisting>
SQL> QUIT;                        
                    </programlisting>
                    </para>
                </listitem>
                <listitem>
                    <para>Если вы хотите зафиксировать всю свою работу перед выходом из isql,
                        введите следующую команду:
                        <programlisting>
SQL> EXIT;                      
                    </programlisting>
                    </para>
                </listitem>
            </itemizedlist></para>
    </section>
    <section xml:id="isql-help">
        <title>Получение справки</title>
        <indexterm>
            <primary>ISQL</primary>
            <secondary>HELP</secondary>
        </indexterm>

        <para>Isql поставляется с командой HELP. Это дает краткую информацию о большинстве доступных
            команд. Команда HELP также позволяет перейти к более подробной информации. Чтобы
            активировать справочную систему, просто введите HELP в командной строке, как показано
            ниже: <programlisting>
SQL> HELP;                      
                    </programlisting>
            <screen>
<![CDATA[
Frontend commands:
BLOBDUMP <blobid> <file>   -- dump BLOB to a file
BLOBVIEW <blobid>          -- view BLOB in text editor
EDIT     [<filename>]      -- edit SQL script file and execute
EDIT                       -- edit current command buffer and execute
HELP                       -- display this menu
INput    <filename>        -- take input from the named SQL file
OUTput   [<filename>]      -- write output to named file
OUTput                     -- return output to stdout
SET      <option>          -- (Use HELP SET for complete list)
SHELL    <command>         -- execute Operating System command in sub-shell
SHOW     <object> [<name>] -- display system information
    <object> = CHECK, COLLATION, DATABASE, DOMAIN, EXCEPTION, FILTER, FUNCTION,
               GENERATOR, GRANT, INDEX, PACKAGE, PROCEDURE, ROLE, SQL DIALECT,
               SYSTEM, TABLE, TRIGGER, VERSION, USERS, VIEW
EXIT                       -- exit and commit changes
QUIT                       -- exit and roll back changes

All commands may be abbreviated to letters in CAPitals
]]>                
            </screen>
        </para>
        <indexterm>
            <primary>ISQL</primary>
            <secondary>HELP</secondary>
            <tertiary>HELP SET</tertiary>
        </indexterm>
        <para>Большинство из этих команд не имеют дальнейших уровней детализации, в то время как
            команда SET имеет. Чтобы углубиться в эти дополнительные уровни, выполните следующие
            действия: <programlisting>
SQL> HELP SET;                      
                    </programlisting>
            <screen>
<![CDATA[
Set commands:
    SET                    -- display current SET options
    SET AUTOddl            -- toggle autocommit of DDL statements
    SET BAIL               -- toggle bailing out on errors in non-interactive mode
    SET BLOB [ALL|<n>]     -- display BLOBS of subtype <n> or ALL
    SET BLOB               -- turn off BLOB display
    SET COUNT              -- toggle count of selected rows on/off
    SET MAXROWS [<n>]      -- limit select stmt to <n> rows, zero is no limit
    SET ECHO               -- toggle command echo on/off
    SET EXPLAIN            -- toggle display of query access plan in the explained form
    SET HEADING            -- toggle display of query column titles
    SET LIST               -- toggle column or table display format
    SET NAMES <csname>     -- set name of runtime character set
    SET PLAN               -- toggle display of query access plan
    SET PLANONLY           -- toggle display of query plan without executing
    SET SQL DIALECT <n>    -- set sql dialect to <n>
    SET STATs              -- toggle display of performance statistics
    SET TIME               -- toggle display of timestamp with DATE values
    SET TERM <string>      -- change statement terminator string
    SET WIDTH <col> [<n>]  -- set/unset print width to <n> for column <col>

All commands may be abbreviated to letters in CAPitals
]]>                
            </screen>
        </para>
        <para>Если вы попытаетесь углубиться в какую-либо другую команду, эффект будет точно таким
            же, как при выполнении только команды HELP.</para>
        <note>
            <para>Команда HELP SET даёт справку только по собственным командам isql. Для управляющий
                SQL операторов, таких как SET TRANSACTION или SET ROLE подсказка не будет
                выведена.</para>
        </note>
    </section>
    <section xml:id="isql-connect">
        <title>Соединение с базой данных</title>

        <indexterm>
            <primary>ISQL</primary>
            <secondary>CONNECT</secondary>
        </indexterm>

        <para>Если при запуске isql вы не указали спецификацию для подключения к базе данных, то
            будет выдана подсказка о том что необходимо соединиться с базой данных с помощью
            оператора CONNECT или создать новую базу данных с помощью оператора CREATE
            DATABASE.</para>
        <para>Оператор CONNECT не является частью DSQL и доступен только внутри ISQL, а потому не
            описан в <quote>Руководство по языку SQL Firebird</quote>. Рассмотрим его
            синтаксис.</para>
        <formalpara>
            <title>Синтаксис:</title>
            <para>
                <programlisting> 
CONNECT <replaceable>&lt;database&gt;</replaceable> 
[USER <replaceable>&lt;username&gt;</replaceable> [PASSWORD <replaceable>&lt;password&gt;</replaceable>]]
[CACHE <replaceable>&lt;cache size&gt;</replaceable>] 
[ROLE <replaceable>&lt;rolename&gt;</replaceable>]                    
                    
<replaceable>&lt;database&gt;</replaceable> ::= [<replaceable>&lt;server spec&gt;</replaceable>] {<replaceable>&lt;db_filename&gt;</replaceable> | <replaceable>&lt;db_alias&gt;</replaceable>}  
                
<replaceable>&lt;server spec&gt;</replaceable> ::= 
    <replaceable>&lt;host&gt;</replaceable>[\{<replaceable>&lt;port&gt;</replaceable> | <replaceable>&lt;service&gt;</replaceable>}]:       
  | \\<replaceable>&lt;host&gt;</replaceable>[@{<replaceable>&lt;port&gt;</replaceable> | <replaceable>&lt;service&gt;</replaceable>}]\     
  | <replaceable>&lt;protocol&gt;</replaceable>://[<replaceable>&lt;host&gt;</replaceable>[:{<replaceable>&lt;port&gt;</replaceable> | <replaceable>&lt;service&gt;</replaceable>}]/]  
                
<replaceable>&lt;protocol&gt;</replaceable> ::= inet | inet4 | inet6 | wnet | xnet                         
                    </programlisting>
            </para>
        </formalpara>
        <para>
            <table frame="all">
                <title>Параметры оператора CONNECT</title>
                <?dbfo keep-together='auto'?>
                <tgroup cols="2">
                    <colspec colname="colArgument" colnum="1" colwidth="1.2*" align="left"/>
                    <colspec colname="colDesc" colnum="2" colwidth="2.8*" align="left"/>
                    <thead>
                        <row valign="middle">
                            <entry align="center">Параметр</entry>
                            <entry align="center">Описание</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><replaceable>database</replaceable></entry>
                            <entry>Спецификация базы данных.</entry>
                        </row>
                        <row>
                            <entry><replaceable>username</replaceable></entry>
                            <entry>Имя пользователя для соединения с базой данных. Может быть
                                заключено в одинарные или двойные кавычки. Если имя пользователя
                                заключено в двойные кавычки, то оно чувствительно к
                                регистру.</entry>
                        </row>
                        <row>
                            <entry><replaceable>password</replaceable></entry>
                            <entry>Пароль пользователя для соединения с базой данных. Чувствительно
                                к регистру. Должен быть заключён в одинарный кавычки.</entry>
                        </row>
                        <row>
                            <entry><replaceable>cache size</replaceable></entry>
                            <entry>Размер страничного кеша.</entry>
                        </row>
                        <row>
                            <entry><replaceable>rolename</replaceable></entry>
                            <entry>Имя роли для соединения с базой данных. Может быть заключено в
                                одинарные или двойные кавычки. Если имя роли заключено в двойные
                                кавычки, то оно чувствительно к регистру.</entry>
                        </row>
                        <row>
                            <entry><replaceable>server spec</replaceable></entry>
                            <entry>Спецификация удалённого сервера. Включает в себя имя сервера и
                                протокол.</entry>
                        </row>
                        <row>
                            <entry><replaceable>db_filename</replaceable></entry>
                            <entry>Полный путь и имя файла базы данных, включая расширение. Имя
                                файла должно быть задано в соответствии со спецификой используемой
                                платформы.</entry>
                        </row>
                        <row>
                            <entry><replaceable>db_alias</replaceable></entry>
                            <entry>Псевдоним (alias) базы данных, присутствующий в файле
                                    <filename>databases.conf</filename></entry>
                        </row>
                        <row>
                            <entry><replaceable>host</replaceable></entry>
                            <entry>Имя сервера или IP адрес, на котором расположена база
                                данных.</entry>
                        </row>
                        <row>
                            <entry><replaceable>port</replaceable></entry>
                            <entry>Номер порта, который слушает удалённый сервер (параметр
                                    <parameter>RemoteServicePort</parameter> файла
                                    <filename>firebird.conf</filename>).</entry>
                        </row>
                        <row>
                            <entry><replaceable>service</replaceable></entry>
                            <entry>Имя сервиса. Должно совпадать со значением параметра
                                    <parameter>RemoteServiceName</parameter> файла
                                    <filename>firebird.conf</filename></entry>
                        </row>
                        <row>
                            <entry><replaceable>protocol</replaceable></entry>
                            <entry>Наименование протокола.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>
        <para>База данных может состоять из одного или нескольких файлов. Первый, основной, файл
            называется первичным, остальные файлы — вторичными. При подключении к базе данных
            необходимо указывать только путь до первичного файла базы данных.</para>

        <para>Спецификация первичного файла — имя файла базы данных и его расширение с указанием к
            нему полного пути в соответствии с правилами используемой операционной системы. </para>
        <section xml:id="isql-connect-aliasedb">
            <title>Использование псевдонимов БД</title>
            <para>Вместо полного пути к первичному файлу базы можно использовать псевдонимы
                (aliases). Псевдонимы описываются в файле <filename>databases.conf</filename> в
                формате:
                <programlisting>  
<replaceable>alias</replaceable> = <replaceable>filepath</replaceable>                    
                </programlisting>
            </para>
            <note>
                <para>Помимо указания псевдонимов для базы данных в этом файле можно задать
                    параметры уровня базы данных для каждой описываемой базы данных. Эти параметры
                    задаются в фигурных скобках сразу после объявления псевдонима. Подробнее читайте
                    в <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="config-perdb"
                        >Параметры уровня базы данных</link></para>
            </note>
        </section>
        <section xml:id="isql-connect-remotely">
            <title>Соединение с БД на удалённом сервере</title>
            <para>При соединении с базой данных на удалённом сервере необходимо указать спецификацию
                удалённого сервера. Спецификация удалённого сервера зависит от используемого
                протокола. </para>
            <para>Если вы при соединении с базой данных используете протокол TCP/IP, то спецификация
                первичного файла должна выглядеть следующим образом:
                <programlisting>  
<replaceable>host</replaceable>[/<replaceable>port</replaceable> | <replaceable>service</replaceable>]:{<replaceable>filepath</replaceable> | <replaceable>db_alias</replaceable>}                   
                </programlisting>
            </para>
            <para>Если вы при соединении с базой данных используете протокол под названием
                именованные каналы (Name Pipes), то спецификация первичного файла должна выглядеть
                следующим образом.
                <programlisting>  
\\<replaceable>host</replaceable>[@<replaceable>port</replaceable> | <replaceable>service</replaceable>]\{<replaceable>filepath</replaceable> | <replaceable>db_alias</replaceable>}                   
                </programlisting>
            </para>
            <para>Существует также унифицированный URL-подобный синтаксис спецификации удалённого
                сервера. В этом синтаксисе первым параметром указывается наименование протокола,
                далее указывается имя сервера или IP адрес, номер порта и путь к первичному файлу
                базы данных или псевдоним. В качестве протокола можно указать следующие значения:<itemizedlist>
                    <listitem>
                        <para>INET — TCP/IP (сначала пробует подключится по протоколу TCP/IP v6,
                            если не получилось, то TCP/IP v4);</para>
                    </listitem>
                    <listitem>
                        <para>INET4 — TCP/IP v4 (начиная с 3.0.1);</para>
                    </listitem>
                    <listitem>
                        <para>INET6 — TCP/IP v6 (начиная с 3.0.1);</para>
                    </listitem>
                    <listitem>
                        <para>WNET — NetBEUI или протокол именованных каналов;</para>
                    </listitem>
                    <listitem>
                        <para>XNET — локальный протокол.</para>
                    </listitem>
                </itemizedlist>
                <programlisting>  
<replaceable>protocol</replaceable>://[<replaceable>host</replaceable>[:<replaceable>port</replaceable> | <replaceable>service</replaceable>]/]{<replaceable>filepath</replaceable> | <replaceable>db_alias</replaceable>}                   
                </programlisting>
            </para>
        </section>
        <section xml:id="isql-connect-user">
            <title>Имя пользователя, пароль и роль</title>

            <para>Необязательные предложения <database>USER</database> и
                    <database>PASSWORD</database> задают, соответственно, имя и пароль пользователя
                присутствующего в базе данных безопасности (<filename>security3.fdb</filename> или
                той, что указана в параметре <parameter>SecurityDatabase</parameter>). Пользователя
                и пароль можно не указывать, если установлены переменные окружения
                    <envar>ISC_USER</envar> и <envar>ISC_PASSWORD</envar>. Их также можно не
                указывать при использовании доверительной аутентификации.</para>

            <para>Если подключение происходит к embedded версии сервера, то достаточно указать
                только имя пользователя (проверка пароля не производится).</para>

            <para>Необязательное предложение ROLE задаёт имя роли, права которой будут учитываться
                при подключении базы данных. Роль должна быть назначена пользователю в
                соответствующей базе данных безопасности. </para>
        </section>
        <section xml:id="isql-connect-charset">
            <title>Набор символов</title>

            <para>Команда CONNECT не позволяет указать набор символов для подключения, однако вы
                можете это сделать с помощью команды SET NAMES, которую необходимо ввести до
                использования CONNECT.</para>
        </section>
        <section xml:id="isql-connect-examples">
            <title>Примеры</title>

            <example>
                <title>Подключение к локальной (embedded) базе данных</title>

                <para>В следующем примере происходит подключение к базе данных в embedded варианте с
                    использованием имени пользователя из переменной среды <envar>ISC_USER</envar>.
                    <programlisting>
SQL> CONNECT "C:\DATABASES\FIREBIRD\MY_EMPLOYEE.FDB";                    
                </programlisting>
                </para>
                <para>В Linux это будет выглядеть следующим образом:
                    <programlisting>
SQL> CONNECT "/databases/firebird/MY_EMPLOYEE.FDB";                  
                </programlisting>
                </para>
                <para>При использовании псевдонимов, настроенных в
                        <filename>databases.conf</filename>:
                    <programlisting>
SQL> CONNECT MY_EMPLOYEE;                  
                </programlisting>
                </para>
                <para>Если переменная окружения <envar>ISC_USER</envar> не задана, или требуется
                    указать другого пользователя, то необходимо использовать предложение USER:
                    <programlisting>
SQL> CONNECT MY_EMPLOYEE USER SYSDBA;                  
                </programlisting>
                </para>
            </example>
            <example>
                <title>Подключение к локальной (не embedded) базе данных</title>

                <para>На Windows можно использовать локальный протокол XNET
                    <programlisting>
SQL> CONNECT xnet://MY_EMPLOYEE USER SYSDBA PASSWORD 'masterkey';                  
                </programlisting>
                </para>

                <para>Во всех операционных системах через TCP
                    <programlisting>
SQL> CONNECT inet://localhost/MY_EMPLOYEE USER SYSDBA PASSWORD 'masterkey';                  
                </programlisting>
                </para>
            </example>
            <example>
                <title>Подключение к удалённой базе данных с ролью RDB$ADMIN</title>

                <para>
                    <programlisting>
SQL> CONNECT inet://dbserver/MY_EMPLOYEE USER BOB PASSWORD 'W45xs' ROLE RDB$ADMIN;                  
                </programlisting>
                </para>
            </example>
            <example>
                <title>Подключение к удалённой базе данных с набором символов WIN1251</title>

                <para>
                    <programlisting>
SQL> SET NAMES WIN1251;                        
SQL> CONNECT inet://dbserver/MY_EMPLOYEE USER BOB PASSWORD 'W45xs';                  
                </programlisting>
                </para>
            </example>
        </section>
    </section>
    <section xml:id="isql-create_db">
        <title>Создание базы данных</title>
        <indexterm>
            <primary>ISQL</primary>
            <secondary>CREATE DATABASE</secondary>
        </indexterm>

        <para>Если при запуске isql вы не указали спецификацию для подключения к базе данных, то
            будет выдана подсказка о том что необходимо соединиться с базой данных с помощью
            оператора CONNECT или создать новую базу данных с помощью оператора CREATE
            DATABASE.</para>
        <para>Оператор CREATE DATABASE является частью DSQL и подробно описан в <quote>Руководство
                по языку SQL Firebird</quote>, поэтому здесь будет приведён только краткий синтаксис
            и примеры использования. </para>
        <formalpara>
            <title>Синтаксис:</title>
            <para>
                <programlisting>                     
CREATE {DATABASE | SCHEMA} '<replaceable>&lt;filespec&gt;</replaceable>'
  [USER <replaceable>username</replaceable> [PASSWORD '<replaceable>password</replaceable>'] [ROLE <replaceable>rolename</replaceable>]]
  [PAGE_SIZE [=] <replaceable>size</replaceable>]
  [LENGTH [=] <replaceable>num</replaceable> [PAGE[S]]
  [SET NAMES '<replaceable>charset</replaceable>']
  [DEFAULT CHARACTER SET <replaceable>default_charset</replaceable>
  [COLLATION <replaceable>collation</replaceable>]]
  [<replaceable>&lt;sec_file&gt;</replaceable> [<replaceable>&lt;sec_file&gt;</replaceable> ...]]
  [DIFFERENCE FILE '<replaceable>diff_file</replaceable>'];

<replaceable>&lt;filespec&gt;</replaceable> ::= [<replaceable>&lt;server_spec&gt;</replaceable>]{<replaceable>filepath</replaceable> | <replaceable>db_alias</replaceable>}

<replaceable>&lt;server_spec&gt;</replaceable> ::= 
    <replaceable>host</replaceable>[\<replaceable>port</replaceable> | <replaceable>service</replaceable>]: 
  | \\<replaceable>host</replaceable>[@<replaceable>port</replaceable> | <replaceable>service</replaceable>]\ 
  | <replaceable>&lt;protocol&gt;</replaceable>://[<replaceable>host</replaceable>[:<replaceable>port</replaceable> | <replaceable>service</replaceable>]/]

<replaceable>&lt;protocol&gt;</replaceable> = inet | inet4 | inet6 | wnet | xnet

<replaceable>&lt;sec_file&gt;</replaceable> ::= FILE '<replaceable>filepath</replaceable>'
  [LENGTH [=] <replaceable>num</replaceable> [PAGE[S]] [STARTING [AT [PAGE]] <replaceable>pagenum</replaceable>]              
                  
</programlisting>
            </para>
        </formalpara>
        <para>В следующем примере будет создана база данных <filename>monkey.fdb</filename> и
            сохранена в директории <filename>test</filename> на диске <filename>С</filename>.
            <programlisting>
SQL>CREATE DATABASE 'C:\test\monkey.fdb' page_size 8192
CON>user 'SYSDBA' password 'masterkey';            
        </programlisting>
        </para>

        <note>
            <para>Путь к базе данных и пароль обязательно должны быть заключены в одинарные или
                двойные кавычки. Для имени пользователя, пароля и набора символов кавычки
                необязательны. При использовании двойных кавычек буду использованы правила
                3-диалекта, т.е. имя пользователя, роли и набора символов будут чувствительны к
                регистру символов.</para>
            <para>Поскольку база данных создаётся в режиме embedded сервера, то файл базы данных
                будет создан с именем входа в систему в качестве владельца. Это может вызвать
                проблемы с доступом к файлу базы данных для других пользователей, особенно в Linux,
                которые могут захотеть подключится позднее. Если база данных создаётся с
                использованием сетевого или локального (Windows) протокола, то файл базы данных
                будет создан от имени пользователя службы (в Linux это пользователь
                firebird).</para>
        </note>

        <para>В данном случае база данных будет создана с использованием embedded версии Firebird.
            Для использования сетевых протоколов вы можете использовать префиксы протоколов или
            другие правила аналогичные правила для оператора CONNECT. </para>

        <example>
            <title>Создание базы данных на удалённом сервере</title>

            <para>Создание базы данных на удалённом сервере baseserver расположенном по пути, на
                который ссылается псевдоним test, описанный в файле
                    <filename>databases.conf</filename>. Используется протокол TCP. Владельцем базы
                данных будет пользователь wizard.
                <programlisting language="sql">  
CREATE DATABASE 'baseserver:test'
USER wizard PASSWORD 'player' ROLE RDB$ADMIN
DEFAULT CHARACTER SET UTF8;                 
</programlisting>
                То же самое с использованием унифицированного URL-подобного синтаксиса задания
                спецификации удалённого сервера.
                <programlisting language="sql">  
CREATE DATABASE 'inet://baseserver:3050/test'
USER wizard PASSWORD 'player' ROLE RDB$ADMIN
DEFAULT CHARACTER SET UTF8;                 
</programlisting>
                или
                <programlisting language="sql">  
CREATE DATABASE 'inet://baseserver:gds_db/test'
USER wizard PASSWORD 'player' ROLE RDB$ADMIN
DEFAULT CHARACTER SET UTF8;                 
</programlisting>
                Начиная с Firebird 3.0.1 можно указать какой именно из протоколов IP v4 или IP v6 вы
                хотите использовать.
                <programlisting language="sql">  
CREATE DATABASE 'inet4://baseserver/test'
USER wizard PASSWORD 'player' ROLE RDB$ADMIN
DEFAULT CHARACTER SET UTF8;                 
</programlisting>
                или
                <programlisting language="sql">  
CREATE DATABASE 'inet6://baseserver/test'
USER wizard PASSWORD 'player' ROLE RDB$ADMIN
DEFAULT CHARACTER SET UTF8;                 
</programlisting>
                Создание базы данных с указанием IP адреса (IPv4) вместо указания имени сервера.
                <programlisting language="sql">  
CREATE DATABASE '127:0:0:1:test'
USER wizard PASSWORD 'player' ROLE RDB$ADMIN
DEFAULT CHARACTER SET UTF8;                 
</programlisting>
                Создание базы данных с указанием IP адреса (IPv6) вместо указания имени сервера.
                <programlisting language="sql">  
CREATE DATABASE '[::1]:test'
USER wizard PASSWORD 'player' ROLE RDB$ADMIN
DEFAULT CHARACTER SET UTF8;                 
</programlisting>
            </para>
        </example>

        <note>
            <para>В отличие от оператора CONNECT в операторе CREATE DATABASE вы сразу можете указать
                набор символов который будет использован в подключении после выполнения оператора
                CREATE DATABASE с помощью предложения SET NAMES.</para>
        </note>

        <para>После создания базы данных вы можете выполнять к ней запросы в интерактивном режиме.
            <programlisting>
SQL>SELECT RDB$RELATION_ID FROM RDB$DATABASE;

RDB$RELATION_ID
===============
128

SQL> commit;            
        </programlisting>
        </para>
        <para>Чтобы вернуться в командную строку введите команду <code>exit</code> или
                <code>quit</code>.</para>

        <note>
            <para>Вышеуказанная методика, как показано, работает, но в идеале базы данных и объекты
                метаданных должны создаваться и поддерживаться с использованием сценариев
                определения данных. </para>
        </note>
    </section>

    <section xml:id="isql-env">
        <title>Установка переменных окружения ISC_USER и ISC_PASSWORD </title>

        <para>Переменная среды — это именованный объект, который содержит информацию, используемую
            одним или несколькими приложениями. Они глобальны для своих конкретных операционных
            систем. Сервер Firebird распознает и использует определенные переменные среды,
            настроенные в Windows, Linux и других системах Unix.</para>

        <para>Переменные среды <envar>ISC_USER</envar> и <envar>ISC_PASSWORD</envar> в Firebird
            предназначены для предоставления SYSDBA доступа к базе данных из служебных программ
            командной строки и клиентских приложений всем, кто имеет доступ к хост-машине.</para>

        <caution>
            <para>При запуске таких утилит командной строки, как <application>isql</application>,
                    <application>gbak</application>, <application>gstat</application> и
                    <application>gfix</application>, Firebird будет искать, установлены ли
                переменные среды <envar>ISC_USER</envar> и <envar>ISC_PASSWORD</envar>. Если вы не
                предоставите имя пользователя и пароль при локальном подключении к базе данных,
                Firebird позволит вам войти в систему, если найдет эти переменные.</para>
            <para>Из соображений безопасности не рекомендуется указывать имя пользователя и пароль
                SYSDBA с использованием этих двух переменных среды, особенно на незащищенном
                компьютере.</para>
        </caution>

        <para>Переменные среды <envar>ISC_USER</envar> и <envar>ISC_PASSWORD</envar> могут быть
            установлены для локального запуска <application>isql</application>. Чтобы установить
            переменные среды:<itemizedlist>
                <listitem>
                    <para>В Windows это делается в Панели управления -> Система -> Дополнительно ->
                        Переменные среды. Любые изменения, сделанные здесь, будут постоянными. Вы
                        также можете определить эти переменные в командном окне до запуска любой из
                        утилит Firebird, например isql. Например:
                        <programlisting>
C:\> set ISC_USER=sysdba
C:\> set ISC_PASSWORD=secret
C:\> isql my_employee

SQL>                        
                    </programlisting>
                    </para>
                </listitem>
                <listitem>
                    <para>На платформах Linux и Unix это зависит от типа используемой оболочки и от
                        конфигурации настольного компьютера. Обратитесь к документации вашей
                        операционной системы, чтобы установить переменные среды. Для оболочки bash
                        этот процесс показан в следующем примере:
                        <programlisting>
cosmos> export ISC_USER=sysdba
cosmos> export ISC_PASSWORD=secret
cosmos> /opt/firebird/bin/isql my_employee

SQL>                        
                    </programlisting>
                    </para>
                </listitem>
            </itemizedlist></para>
    </section>

    <section xml:id="isql-sql_dialect">
        <title>SQL диалект</title>
        <para>Firebird поддерживает три диалекта SQL на каждом клиенте и сервере базы данных. Эти
            диалекты SQL различаются в контексте формата даты и времени и точности числового типа
            данных. Диалекты служат для инструктирования сервера Firebird о том, как обрабатывать
            функции, реализованные в устаревших базах данных Borland Interbase, более ранних, чем
            версия 6.0. Диалекты устанавливаются во время выполнения и могут быть изменены для
            клиента во время подключения или с помощью команды SET SQL DIALECT.</para>

        <note>
            <para>Диалект 2 используется только при преобразовании базы данных диалекта 1 в базу
                данных диалекта 3.</para>
        </note>

        <para>Следующая таблица демонстрирует некоторые различия между диалектами. <table
                frame="all">
                <title>Различия между SQL диалектами</title>
                <tgroup cols="4">
                    <colspec colname="c1" colnum="1" colwidth="1*"/>
                    <colspec colname="c2" colnum="2" colwidth="1*"/>
                    <colspec colname="c3" colnum="3" colwidth="1*"/>
                    <colspec colname="c4" colnum="4" colwidth="1*"/>
                    <thead>
                        <row>
                            <entry>SQL</entry>
                            <entry>Dialect 1</entry>
                            <entry>Dialect 2</entry>
                            <entry>Dialect 3</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Тип данных DATE</entry>
                            <entry>Дата + время (Timestamp)</entry>
                            <entry>Сообщение об ошибке</entry>
                            <entry>Только дата</entry>
                        </row>
                        <row>
                            <entry>Тип данных TIMSTAMP</entry>
                            <entry>Timestamp</entry>
                            <entry>Timestamp</entry>
                            <entry>Timestamp</entry>
                        </row>
                        <row>
                            <entry>Тип данных TIME</entry>
                            <entry>Сообщение об ошибке</entry>
                            <entry>Сообщение об ошибке</entry>
                            <entry>Только время</entry>
                        </row>
                        <row>
                            <entry>Идентификаторы с разделителями (квотированные идентификаторы)
                                    "<replaceable>&lt;identifier&gt;</replaceable>"</entry>
                            <entry>Строка</entry>
                            <entry>Сообщение об ошибки</entry>
                            <entry>Идентификатор</entry>
                        </row>
                        <row>
                            <entry>Точность арифметических операций. Например 1/3</entry>
                            <entry>0.3333333... (double precision)</entry>
                            <entry>0</entry>
                            <entry>0 (по правилам целочисленного деления)</entry>
                        </row>
                        <row>
                            <entry>Представление NUMERIC и DECIMAL с точностью больше 10</entry>
                            <entry>double precision</entry>
                            <entry>64-битное целое</entry>
                            <entry>64-битное целое (BIGINT)</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table></para>

        <note>
            <para>В настоящее время возможно создание баз данных только на диалекте 1 и 3, однако
                рекомендуется использовать исключительно диалект 3, поскольку в конечном итоге
                диалект 1 будет устаревшим. Диалект 2 нельзя использовать для создания базы данных,
                поскольку он служит только для преобразования Диалекта 1 в Диалект 3.</para>
        </note>

        <para>При подключении к базе данных с использованием <application>isql</application> утилита
            использует диалект базы данных, если не указано иное. Диалекты не могут быть установлены
            в качестве параметра оператора <code>CREATE DATABASE</code>. Таким образом, при создании
            базы данных с использованием <application>isql</application> база данных будет на
            диалекте, который является текущим в <application>isql</application> во время выполнения
            оператора <code>CREATE DATABASE</code>. Вы можете установить диалект с помощью утилиты
                <application>isql</application> двумя способами:<itemizedlist>
                <listitem>
                    <para>При старте isql укажите диалект с использованием переключателя
                        -sql_dialect
                        <programlisting>
cosmos> isql -sql_dialect 3                        
                    </programlisting>
                    </para>
                </listitem>
                <listitem>
                    <para>Внутри sql скрипта или в isql сессии с помощью команды <code>SET SQL
                            DIALECT</code>
                        <programlisting>
SQL> SET SQL DIALECT 3;                       
                    </programlisting>
                    </para>
                </listitem>
            </itemizedlist></para>
    </section>

    <section xml:id="isql-terminator">
        <title>Символ терминатора</title>

        <para>Символом терминатором по умолчанию для базы данных Firebird является точка с запятой
                <quote>;</quote>. Операторы будут только выполнены если они заканчиваются точкой с
            запятой. Однако вы можете использовать <application>isql</application> для изменения
            символа на любой печатный символ или несколько символов из первых 127 символов
            подмножества ASCII с помощью команды <code>SET TERM</code>.</para>

        <note>
            <para>Терминатор по умолчанию может быть изменен во всех случаях, за исключением
                Procedural SQL или PSQL. PSQL не принимает никаких терминаторов, кроме точки с
                запятой.</para>
        </note>

        <para>Для изменения символа терминатора на тильду <quote>~</quote> введите следующую
            команду: <programlisting>
    SQL> SET TERM ~ ;        
        </programlisting>
        </para>

        <para>Для возврата терминатора, вы должны использовать текущий терминатор! Изменение
            терминатора полезно, если вы хотите ввести функцию PSQL, как показано в следующем
            примере. Поскольку PSQL будет принимать только точку с запятой в качестве терминатора,
            isql должен знать, какая точка с запятой используется для кода PSQL, а какая
            используется для завершения вводимых команд SQL.
            <programlisting>
SQL> set term ~ ;

SQL> create procedure test_proc (iInput integer = 666)
CON> returns (oOutput integer)
CON> as
CON> begin
CON>   oOutput = iInput;
CON>   suspend;
CON> end~

SQL> set term ; ~

SQL> commit;

SQL> select * from test_proc;

OOUTPUT
============
666            
        </programlisting>
        </para>

        <para>Вы можете видеть, что внутри кода самой процедуры терминатором является точка с
            запятой. Однако вне фактического кода процедуры терминатором является тильда (~).
                <application>isql</application> обрабатывает одну команду <code>CREATE
                PROCEDURE</code>, но внутри этого одного оператора SQL есть несколько встроенных
            операторов PSQL:
            <programlisting>
oOutput = iInput;
suspend;                
            </programlisting>
        </para>

        <para>Они имеют точку с запятой, как того требует PSQL. Конец команды CREATE PROCEDURE
            обозначается использованием тильды в качестве терминатора:
            <programlisting>
end~               
            </programlisting>
        </para>

        <para>При желании вы можете просто изменить терминатор, потому что вы предпочитаете что-то
            другое, а не точку с запятой.
            <programlisting>
SQL> -- Change terminator from ; to +
SQL> set term + ;

SQL> select count(*) from employee+

COUNT
============
42

SQL> -- Change terminator from + to 'fred'
SQL> set term fred +

SQL> select count(*) from employee fred

COUNT
============
42

SQL> -- Change back from 'fred' to ;
SQL> set term ; fred
            </programlisting>
        </para>

        <para>Однако вы должны быть осторожны, чтобы не выбрать символ-терминатор, который приведет
            к сбою операторов SQL из-за того, что терминатор используется в какой-то момент в
            операторе SQL.
            <programlisting>
SQL> select 600+60+6 as The_Beast from rdb$database;

THE_BEAST
=====================
666

SQL> set term + ;
SQL> select 600+60+6 as The_Beast from rdb$database+

Statement failed, SQLSTATE = 42000
Dynamic SQL Error
-SQL error code = -104
-Unexpected end of command - line 1, column 8
...

SQL> set term ; +                
            </programlisting>
        </para>

        <para>Присутствие терминатора в выражении вызвало ошибку <quote>Unexpected end of
                command</quote>. Анализатор SQL в ядре базы данных Firebird определил, что
                <code>select 600</code> не является допустимым оператором. По этой причине лучше
            всегда выбирать символ или символы, которые не будут путать синтаксический анализатор.
            <programlisting>
SQL> set term !! ;

SQL> select 600+60+6 as The_Beast from rdb$database!!

THE_BEAST
=====================
666              
            </programlisting>
        </para>
    </section>

    <section xml:id="isql-prompts">
        <title>Подсказки ISQL</title>

        <formalpara>
            <title>Подсказка SQL</title>

            <para>Как показано выше, обычная подсказка <application>isql</application> для ввода —
                это подсказка <code>SQL></code>. Это указывает на то, что предыдущая команда была
                выполнена, и теперь <application>isql</application> ожидает обработки новой
                команды.</para>
        </formalpara>

        <formalpara>
            <title>Подсказка CON</title>

            <para>Подсказка <code>CON></code> отображается, если пользователь нажимает клавишу ENTER
                без завершения оператора SQL с помощью терминатора. Например:
                <programlisting>
SQL> HELP
CON>                
            </programlisting>
            </para>
        </formalpara>

        <para>Всякий раз, когда вы видите приглашение <code>CON></code>, вы можете либо продолжить
            ввод оставшейся части команды, либо ввести терминатор для завершения команды. В
            последнем случае команда будет выполнена после нажатия клавиши ENTER.</para>
    </section>

    <section xml:id="isql-errors">
        <title>Обработка ошибок и поддержка исключений</title>

        <para>Обработка исключений — это программная конструкция, предназначенная для обработки
            ситуаций, которые нарушает нормальное выполнение программы. Это так называемые ошибки.
            Исключением являются именованное сообщение об ошибке, определяемые пользователем,
            написанные специально для базы данных и сохраненные в этой базе данных для использования
            в хранимых процедурах, функциях, пакетах, анонимных блоках и триггерах.</para>
        <para>Например, если в триггере обнаруживается, что значение для таблицы неверно, то
            возникает исключение. Это приводит к откату всей транзакции, которую клиентское
            приложение пытается зафиксировать. Исключения могут совместно использоваться различными
            модулями приложения и даже различными приложениями, совместно использующими базу данных.
            Они предоставляют простой способ стандартизировать обработку заранее запрограммированных
            ошибок ввода.</para>
        <para>Исключения составляют объекты базы данных, такие как таблицы, представления и домены,
            и являются частью метаданных базы данных. Их можно создавать, изменять и удалять, как и
            все другие объекты Firebird, используя <application>isql</application>.</para>
        <para>В <application>isql</application> сообщения об ошибках содержат переменную SQLSTATE и
            статус вектор Firebird. Расшифровку кодов ошибок SQLSTATE вы можете найти в "Руководстве
            по языку SQL СУБД Firebird".</para>
        <example>
            <title>Сообщение об ошибке в isql</title>

            <para>
                <programlisting>
<![CDATA[
SQL> select 1/0 from rdb$database;

               DIVIDE
=====================
Statement failed, SQLSTATE = 22012
arithmetic exception, numeric overflow, or string truncation
-Integer divide by zero.  The code attempted to divide an integer value by an integer divisor of zero.
]]>                    
                </programlisting>
            </para>
        </example>
    </section>

    <section xml:id="isql-transactions">
        <title>Обработка транзакций</title>

        <para>В <application>isql</application> транзакция начинается сразу после запуска утилиты.
            Транзакция начинается в изоляции SNAPSHOT с разрешением блокировки в режиме WAIT.
            Поскольку утилита Firebird <application>isql</application> принимает DDL, DML и другие
            команды, транзакции обрабатываются соответствующим образом следующими способами: <itemizedlist>
                <listitem>
                    <para>Операторы DDL фиксируются автоматически в двух случаях:<itemizedlist>
                            <listitem>
                                <para>Когда операторы COMMIT включен в скрипт.</para>
                            </listitem>
                            <listitem>
                                <para>Когда включена автоматическая фиксация транзакций для DDL
                                    операторов (режим по умолчанию). В этом случае выполнение
                                    каждого DDL оператора транзакция автоматически подтверждается
                                    после ввода каждого оператора DDL, и стартует новая транзакция.
                                    Чтобы отключить режим автоматической фиксации, выполните
                                    инструкцию <code>SET AUTODDL OFF</code>. Для возврата в режим
                                    автоматической фиксации для DDL операторов выполните инструкцию
                                        <code>SET AUTODDL ON</code>.</para>
                            </listitem>
                        </itemizedlist></para>
                </listitem>
                <listitem>
                    <para>Операторы DML для выборки или изменения данных стартуют новую транзакцию с
                        уровнем изоляции SNAPSHOT, если она не была начата ранее. Такая транзакция
                        будет активной до тех пор, пока не будет вручную подтверждена оператором
                        COMMIT или отменена оператором ROLLBACK. </para>
                </listitem>
                <listitem>
                    <para>Вы можете использовать различные команды SHOW в isql для запроса
                        метаданных базы данных. При этом ISQL запускает транзакцию с уровнем
                        изоляции READ COMMITED, что дает возможность видеть все изменения
                        метаданных, подтвержденные другими пользователями. </para>
                </listitem>
            </itemizedlist></para>

        <para>Пользователи могут указать уровень изоляции и другие параметры для следующей
            транзакции с помощью оператора <code>SET TRANSACTION</code>. Он может быть выполнен
            только тогда, когда не активна другая транзакция. В противном случае будет задан вопрос:
            подтвердить или откатить активную транзакцию. Синтаксис оператора <code>SET
                TRANSACTION</code> подробно описан в <quote>Руководство по языку SQL
                Firebird</quote>.</para>

        <example>
            <title>Старт транзакции с режимом изолированности READ COMMITED</title>

            <para>
                <programlisting language="sql">
SET TRANSACTION WAIT READ COMMITTED LOCK TIMEOUT 10;                    
                </programlisting>
            </para>
        </example>

        <note>
            <para>Поскольку оператор <code>SET TRANSACTION</code> является оператором DSQL, а не
                собственной командой <application>isql</application>, то информация о нём
                отсутствует в справке выдаваемой оператором <code>HELP SET</code>.</para>
        </note>
    </section>

    <section xml:id="isql-script_handling">
        <title>Обработка скрипта</title>

        <para>Пакет операторов DDL и/или DML в текстовом файле называется сценарием (скриптом).
            Скрипты могут быть использованы для создания и изменения объектов базы данных
            (метаданных). Они называются сценариями языка определения данных (DDL). Скрипты, которые
            манипулируют данными путем выбора, вставки, обновления, удаления или выполнения
            преобразований данных, называются скриптами языка манипулирования данными (DML).</para>

        <para> Одной из наиболее важных задач, выполняемых <application>isql</application>, является
            обработка скриптов. Он может обрабатывать как сценарии DDL, так и сценарии DML. Большие
            файлы сценариев можно разбить на несколько файлов скриптов поменьше с помощью инструкции
            INPUT. </para>

        <formalpara>
            <title>Синтаксис:</title>
            <para>
                <programlisting> 
INPUT <replaceable>&lt;filespec&gt;</replaceable>                      
                    </programlisting>
            </para>
        </formalpara>

        <para>Данный оператор позволяет включить один файл сценария внутрь другого. Операторы
            сценариев выполняются в том порядке, в котором они появляются в файле сценариев.
            Настройка по умолчанию в <application>isql</application> для AUTODDL установлена на ON.
            Вы можете использовать команду <code>SET AUTODDL</code>, чтобы контролировать, где или
            когда будут подтверждены операторы изменения метаданных. </para>

        <note>
            <para>Параметр AUTODDL влияет только на операторы DDL. Он не фиксирует транзакцию для
                операторов DML. Если вы смешиваете инструкции DDL и DML в одном и том же
                интерактивном сеансе, то фиксации транзакций для DDL с помощью AUTODDL не фиксируют
                ваши транзакции для операторов DML. Например:
                <programlisting>
SQL> set autoddl on;

SQL> insert into test(a) values (666);
SQL> commit;

SQL> select * from test;

A
============
666

SQL> insert into test(a) values (999);
SQL> select * from test;

A
============
666
999

SQL> create table another_test(b integer);
SQL> rollback;

SQL> select * from test;

A
============
666                
            </programlisting>
            </para>
        </note>

        <para>Скрипты могут перенаправить свои выходные данные в файл журнала с помощью команды
                <code>OUTPUT <replaceable>&lt;file_name&gt;</replaceable></code>. Это можно ввести
            непосредственно в приглашении <application>isql</application> или как часть самого файла
            скрипта. </para>
    </section>

    <section xml:id="isql-commands">
        <title>ISQL команды</title>

        <para>Команды Isql влияют на работу самого isql и никак не влияют на базу данных или данные.
            Эти команды используются для отображения справки, чтения, записи и запуска сценариев, а
            также выполнение инструкций командной строки. Вы можете легко увидеть список доступных
            команд, набрав команду HELP, которая выдаст следующий вывод: <screen>
<![CDATA[
SQL> HELP;
Frontend commands:
BLOBDUMP <blobid> <file>   -- dump BLOB to a file
BLOBVIEW <blobid>          -- view BLOB in text editor
EDIT     [<filename>]      -- edit SQL script file and execute
EDIT                       -- edit current command buffer and execute
HELP                       -- display this menu
INput    <filename>        -- take input from the named SQL file
OUTput   [<filename>]      -- write output to named file
OUTput                     -- return output to stdout
SET      <option>          -- (Use HELP SET for complete list)
SHELL    <command>         -- execute Operating System command in sub-shell
SHOW     <object> [<name>] -- display system information
    <object> = CHECK, COLLATION, DATABASE, DOMAIN, EXCEPTION, FILTER, FUNCTION,
               GENERATOR, GRANT, INDEX, PACKAGE, PROCEDURE, ROLE, SQL DIALECT,
               SYSTEM, TABLE, TRIGGER, VERSION, USERS, VIEW
EXIT                       -- exit and commit changes
QUIT                       -- exit and roll back changes

All commands may be abbreviated to letters in CAPitals
]]>            
        </screen>
        </para>

        <para>Теперь обсудим каждую из команд отдельно.</para>

        <note>
            <para>Обратите внимание на последнюю строку вывода команды help. Это объясняет, что
                каждая из команд может быть сокращена до букв, отображаемых заглавными буквами. В
                следующем обсуждении дополнительные символы будут отображаться, как указано выше,
                строчными буквами. Например, команда ввода будет показана как INput, чтобы указать,
                что символы 'put' являются необязательными.</para>
        </note>

        <section xml:id="isql-commands-blobdump">
            <title>BLOBDUMP</title>

            <indexterm>
                <primary>ISQL команды</primary>
                <secondary>BLOBDUMP</secondary>
            </indexterm>

            <formalpara>
                <title>Назначение:</title>

                <para>Сохранение данных BLOB в указанном файле.</para>
            </formalpara>

            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting> 
BLOBDUMP <replaceable>&lt;blob_id&gt;</replaceable> <replaceable>&lt;filename&gt;</replaceable>                      
                    </programlisting>
                </para>
            </formalpara>

            <para>
                <table frame="all">
                    <title>Параметры оператора BLOBDUMP</title>
                    <?dbfo keep-together='auto'?>
                    <tgroup cols="2">
                        <colspec colname="colArgument" colnum="1" colwidth="1.2*" align="left"/>
                        <colspec colname="colDesc" colnum="2" colwidth="2.8*" align="left"/>
                        <thead>
                            <row valign="middle">
                                <entry align="center">Параметр</entry>
                                <entry align="center">Описание</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><replaceable>blob_id</replaceable></entry>
                                <entry>
                                    <para>BLOB идентификатор.</para>
                                </entry>
                            </row>
                            <row>
                                <entry><replaceable>filename</replaceable></entry>
                                <entry>
                                    <para>Имя файла в который необходимо сохранить BLOB.</para>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
            <para>Эта команда позволяет вам скопировать BLOB из базы данных во внешний файл.
                Оператор BLOBDUMP требует два параметра, идентификатор BLOB-объекта и имя файла. Вам
                необходимо передать идентификатор BLOB-объекта в виде пары шестнадцатеричных чисел,
                разделенных двоеточием. Первое число — это идентификатор таблицы, а второе —
                последовательный номер в базе данных. Для получения этого идентификатора выполните
                любой оператор SELECT, который выбирает столбец BLOB. Вывод покажет
                шестнадцатеричный идентификатор BLOB выше или на месте столбца BLOB в зависимости от
                того, установлен ли SET BLOBDISPLAY в ON или OFF.</para>
            
            <example>
                <title>Сохранение BLOB во внешний файл</title>
                
                <para>
                    <programlisting>
<![CDATA[
SQL> set blobdisplay off;

SQL> select proj_id, proj_desc
CON> from project
CON> where proj_id = 'MKTPR';

PROJ_ID PROJ_DESC
======= =================
MKTPR   85:10

SQL> blobdump 85:10 c:\project.jpg;
]]>                        
                    </programlisting>
                </para>
            </example>
            
            <para>Идентификатор BLOB-объекта, необходимый в приведенном выше примере, равен
                85:10.</para>
            
            <formalpara>
                <title>Смотри также:</title>
                
                <para>SET BLOBDISPLAY.</para>
            </formalpara>
        </section>
    </section>
</chapter>
