<!DOCTYPE chapter>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.1" xml:id="hardware" xml:lang="ru">
    <info>
        <title>Конфигурирование и подбор аппаратного обеспечения</title>
    </info>

    <section xml:id="hardware-theory">
        <title>Немного теории</title>

        <para>Чтобы понять, какое аппаратное обеспечение лучше всего подойдет для вашей БД Firebird,
            мы должны понять, как Firebird использует его компоненты: CPU, RAM, HDD/SSD, и как эти
            компоненты взаимодействуют с ОС (например, с файловым кэшем).</para>

        <section xml:id="hardware-theory-modules">
            <title>Функциональные модули сервера</title>

            <para>Прежде всего, мы рассмотрим функциональные компоненты Firebird, в чем нам поможет
                следующий рисунок: <figure>
                    <title>Firebird modules</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/01-memory.png" width="680"/>
                        </imageobject>
                        <textobject>
                            <phrase>Firebird modules</phrase>
                        </textobject>
                    </mediaobject>
                </figure>
            </para>

            <para>Firebird включает в себя следующие основные функциональные компоненты: <orderedlist>
                    <listitem>
                        <para>Объекты метаданных — это представления таблиц, индексов, триггеров,
                            хранимых процедур и других объектов БД. Объекты метаданных располагаются
                            в адресном пространстве процесса Firebird (это может быть fbserver,
                            fb_inet_server или firebird.exe).</para>
                    </listitem>
                    <listitem>
                        <para>Кэш страничных буферов содержит страницы базы данных, прочитанные с
                            диска, и располагается в адресном пространстве процесса сервера.
                            Механизм кэширования страниц достаточно сложный, поэтому ограничимся
                            утверждением, что Firebird кэширует наиболее часто используемые страницы
                            базы данных.</para>
                    </listitem>
                    <listitem>
                        <para>При выполнении сортировок Firebird выполняет ее в памяти (в адресном
                            пространстве процесса сервера), пока размер используемой памяти для всех
                            выполняемых одновременно сортировок не достигнет предела, установленного
                            параметром TempCacheLimit (firebird.conf). При превышении этого лимита
                            создается временный файл (с соответствующим флагом операционной системы)
                            в папке временных файлов, и в нем выполняется сортировка. В случае, если
                            в системе есть свободная память (RAM), то файл сортировки будет
                            кэширован на уровне ОС и сортировка будет производиться в памяти.</para>
                    </listitem>
                    <listitem>
                        <para>Глобальные временные таблицы (GTT) создаются как временные файлы ОС.
                            При наличии свободной памяти у ОС операции с GTT выполняются в
                            RAM.</para>
                    </listitem>
                </orderedlist></para>
        </section>

        <section xml:id="hardware-theory-hardware_operations">
            <title>Базовые операции с hardware</title>

            <para>Давайте рассмотрим взаимодействие функциональных модулей Firebird с компонентами
                hardware в контексте операций, которые выполняются при работе с базами
                данных.</para>
            <para>При старте Firebird процесс сервера занимает в RAM минимальный объем (несколько
                мегабайт), и не производит никаких интенсивных операций с CPU или RAM.</para>
            <para>При соединении с БД сервер начинает читать её метаданные и создавать
                соответствующие объекты в памяти, отчего размер процесса увеличивается
                пропорционально количеству используемых таблиц, индексов, триггеров и других
                метаданных. Использование памяти увеличивается, но CPU практически не задействован
                на этом этапе.</para>
            <para>Когда клиент начинает выполнять SQL-запросы (включая хранимые процедуры), сервер
                выполняет соответствующие операции, обращающиеся к hardware. Среди этих операций мы
                можем выделить следующие базовые операции, взаимодействующие с компонентами
                hardware: <itemizedlist>
                    <listitem>
                        <para>чтение страниц базы данных с диска;</para>
                    </listitem>
                    <listitem>
                        <para>запись страниц БД на диск;</para>
                    </listitem>
                    <listitem>
                        <para>чтение страниц базы данных из кэша;</para>
                    </listitem>
                    <listitem>
                        <para>запись страниц БД в кэш;</para>
                    </listitem>
                    <listitem>
                        <para>чтение и запись страниц данных в глобальные временные таблицы (Global
                            Temporary Tables);</para>
                    </listitem>
                    <listitem>
                        <para>обработка SQL запроса (например, JOINs );</para>
                    </listitem>
                    <listitem>
                        <para>сортировка записей в результирующем наборе данных (resultset).</para>
                    </listitem>
                </itemizedlist></para>
            <para>Для выполнения каждой из этой операции требуется определенный набор системных
                ресурсов. В таблице ниже представлено потребление ресурсов, выраженное в условных
                единицах интенсивности (1 означает небольшую интенсивность, 10 – максимальную): <table>
                    <?dbfo keep-together='auto'?>
                    <title>Оценка затрат на различные операции</title>

                    <tgroup cols="9">
                        <colspec colwidth="0.2*" align="left"/>
                        <colspec colwidth="0.15*" align="left"/>
                        <colspec colwidth="0.15*" align="left"/>
                        <colspec colwidth="0.2*" align="left"/>
                        <colspec colwidth="0.2*" align="left"/>
                        <colspec colwidth="0.15*" align="left"/>
                        <colspec colwidth="0.15*" align="left"/>
                        <colspec colwidth="0.3*" align="left"/>
                        <colspec colwidth="0.3*" align="left"/>
                        <thead>
                            <row valign="middle">
                                <entry align="center"/>
                                <entry align="center">Read page from disk</entry>
                                <entry align="center">Write page to disk</entry>
                                <entry align="center">Read page from page buffers cache</entry>
                                <entry align="center">Write page to page buffers cache</entry>
                                <entry align="center">Read from GTT</entry>
                                <entry align="center">Write to GTT</entry>
                                <entry align="center">Сортировка записей</entry>
                                <entry align="center">Обработка SQL</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row valign="middle">
                                <entry>CPU</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                                <entry>5</entry>
                                <entry>10</entry>
                            </row>
                            <row>
                                <entry>RAM</entry>
                                <entry>5</entry>
                                <entry>5</entry>
                                <entry>5</entry>
                                <entry>5</entry>
                                <entry>5</entry>
                                <entry>5</entry>
                                <entry>5</entry>
                                <entry>2</entry>
                            </row>
                            <row>
                                <entry>Disk IO</entry>
                                <entry>10</entry>
                                <entry>10</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                                <entry>1</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>

            <para>Как видите, что наиболее тяжелыми операциями являются те, которые включают работу
                с диском, так как дисковая подсистема, несмотря на прогресс последних лет, связанный
                с SSD, все равно является наиболее медленным компонентом hardware. <note>
                    <para>Отсюда вытекает одно из направлений оптимизации производительности, в
                        полной мере относящееся к hardware – максимально переносить все операции
                        чтения-записи в RAM. Сразу отметим, что подход «давайте сделаем страничный
                        кэш побольше» не работает. Мы подробно рассмотрим этот вопрос в разделе
                        «RAM».</para>
                </note>
            </para>
        </section>

        <section>
            <title>Параллельность выполнения операций</title>

            <para>Обычно требует подобрать hardware для сервера, который будет обслуживать большое
                количество клиентов, поэтому важно понимать, как реализована параллельность
                выполнения операций.</para>
            <para>С точки зрения компонентов аппаратного обеспечения можно говорить о параллельности
                использования CPU, диска и RAM. Современные CPU имеют несколько ядер, которые могут
                параллельно выполнять наборы инструкций, поэтому сервер СУБД распределяет операции
                между ядрами, то есть, можно сделать простой вывод – чем больше ядер у CPU, тем
                больше клиентов сможет работать на этом сервере.</para>
            <para>С точки зрения дисковой подсистемы все не так однозначно. Традиционные жесткие
                диски (HDD) при считывании информации физически перемещают головку по магнитным
                дорожкам с некоторой конечной скоростью. База данных может быть достаточно большой,
                например, размером в 3 терабайта, и если клиентские SQL запросы будут параллельно
                обращаться к данным, расположенным в разных областях файла, то головка диска будет
                метаться между разными областями диска, серьезно затормаживая процессы
                чтения-вывода. При этом значительно вырастет очередь диска, а остальные ресурсы
                (CPU, RAM) будут простаивать. Разумеется, кэш дисковой подсистемы (кэш диска или
                RAID-контроллера) в какой-то мере компенсирует такое замедление, но
                недостаточно.</para>
            <para>SSD диски, в отличие от традиционных HDD, в значительно меньшей мере страдают от
                деградации производительности при параллельном доступе к данным. Особенно заметно
                преимущество SSD при параллельной записи данных – наши тесты показывали 7-кратное
                преимущество SSD над SATA (<link xmlns:xlink="http://www.w3.org/1999/xlink"
                    xlink:href="http://ib-aid.com/en/articles/firebird-performance-degradation-tests-myths-and-truth/"
                    >http://ib-aid.com/en/articles/firebird-performance-degradation-tests-myths-and-truth/</link>
                ). Однако, у SSD есть ряд моментов, которые надо обязательно учитывать при
                эксплуатации (см. раздел «Выбор дисковой подсистемы»), чтобы избежать падения
                скорости работы, преждевременной поломки диска и потери данных.</para>
            <para>Операции с RAM на современном компьютере выполняются очень быстро, практически
                ограничены только пропускной способностью шины данных, и поэтому не являются узким
                местом даже при множестве параллельных SQL-запросов.</para>
        </section>

        <section>
            <title>Потоки данных</title>

            <para>При выполнении SQL-запросов Firebird читает и записывает большое количество
                данных, перемещает их между функциональными модулями и соответствующими компонентами
                hardware. Нам необходимо изучить пути, по которым происходит обмен данными, чтобы
                идентифицировать возможные узкие места, в этом нам поможет рисунок ниже: <figure>
                    <title>Data flows between RAM and persistent storage</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/02-data-flows.png" width="680"/>
                        </imageobject>
                        <textobject>
                            <phrase>Data flows between RAM and persistent storage</phrase>
                        </textobject>
                    </mediaobject>
                </figure>
            </para>

            <para>Очевидно, что основные затраты времени возникают при перемещении данных из
                постоянного хранилища в RAM и назад. При этом возникает два потока данных –
                чтение/запись страниц данных файла базы данных и чтение/запись файлов сортировок.
                Так как файлов сортировок может быть несколько и они могут быть достаточно большими,
                то они могут существенно нагружать дисковую подсистему, поэтому желательно развести
                эти потоки ввода-вывода по разным дискам.</para>
        </section>

        <section>
            <title>Резервное копирование</title>

            <para>Firebird предлагает 2 способа резервного копирования – верифицированный backup с
                помощью утилиты gbak, и неверифицированный инкрементальный backup c помощью утилиты
                nbackup.</para>
            <para>Бэкап с помощью gbak является верифицированным, т.к. при его создании происходит
                чтение каждой записи в каждой таблице БД, и таким образом проверяется целостность
                информации в БД, а nbackup при создании бэкапа переносит страницы данных целиком, не
                проверяет целостность данных, и соответственно, является неверифицированным. <tip>
                    <para>Мы рекомендуем использовать комбинацию средств резервного копирования –
                        частые запуски nbackup (например, каждый час, день и неделю) и ежедневный
                        ночной верифицируемый backup с помощью gbak.</para>
                </tip>
            </para>

            <para>При резервном копировании любым способом происходит чтение файла базы данных
                (всего или части), и запись резервной копии (полной или частичной). Операции записи
                при создании резервной копии идут последовательно, это означает, что обычные
                недорогие жесткие диски с интерфейсом SATA (HDD SATA) хорошо подойдут для хранения
                резервных копий, так как скорость последовательной записи у них довольно
                велика.</para>
        </section>
    </section>

    <section>
        <title>Выбор подходящего железа</title>

        <para>Теперь, когда мы представляем, как Firebird взаимодействует с аппаратным обеспечением,
            необходимо подробно рассмотреть факторы, влияющие на выбор конкретного компонента и его
            характеристики.</para>
        <para>В ряде случаев на выбор компонентов hardware сильно влияют реальные статистические
            данные конкретной БД, поэтому мы будем использовать инструменты из HQbird
            (профессионального дистрибутива Firebird для предприятий от IBSurgeon) для получения
            этих характеристик. Вы можете скачать триальную версию HQbird на сайте <link
                xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ib-aid.com/en/hqbird/"
                >http://ib-aid.com/en/hqbird/</link>.</para>

        <section>
            <title>CPU</title>

            <para>Для выбора CPU необходимо учитывать 3 вещи:<orderedlist>
                    <listitem>
                        <para>Какие запросы преобладают в приложении</para>
                    </listitem>
                    <listitem>
                        <para>Количество активных соединений с БД в среднем и в моменты пиковой
                            нагрузки</para>
                    </listitem>
                    <listitem>
                        <para>Версию и архитектуру Firebird</para>
                    </listitem>
                </orderedlist></para>

            <section>
                <title>Какие запросы преобладают в приложении?</title>

                <para>Firebird всегда исполняет один запрос на одном ядре, поэтому сложные или плохо
                    оптимизированные запросы могут занимать до 100% одного ядра, заставляя остальные
                    запросы переместиться на менее загруженные ядра, и чем больше ядер, тем меньше
                    шанс, что все процессорные мощности будут заняты, а пользователи увидят
                    замедление работы приложения.</para>

                <para>Если приложение в основном исполняет простые короткие SQL запросы, все запросы
                    хорошо отлажены, и не используется генерация запросов на лету (ad hoc)
                    (например, для отчетов), то CPU не будет являться узким местом
                    производительности, и можно выбрать младшую модель с меньшим количеством
                    ядер.</para>

                <para>Если приложение содержит генератор отчетов или большое количество медленных
                    запросов, возвращающих большое количество данных, то необходим процессор с
                    большим количеством ядер.</para>
            </section>

            <section>
                <title>Количество активных соединений с БД в среднем и в моменты пиковой
                    нагрузки</title>

                <para>Количество соединений (активных пользователей) также влияет на выбор CPU. К
                    сожалению, часто даже разработчики приложений не представляют, сколько в
                    точности соединений, запросов и транзакций выполняется в данный конкретный
                    момент. Для уточнения этой информации мы рекомендуем воспользоваться
                    инструментом MON$ Logger из HQbird, и снять несколько снэпшотов в моменты
                    рабочей нагрузки, на которых будет четко видно, сколько в действительности
                    установлено соединений. <figure>
                        <title>MON$Logger: number of attachments</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/03-number-of-attachments.png" width="680"
                                />
                            </imageobject>
                            <textobject>
                                <phrase>MON$Logger: number of attachments</phrase>
                            </textobject>
                        </mediaobject>
                    </figure>
                </para>
                <para>Например, в данном примере видно, что число соединений составляет 296.
                    Очевидно, что использование 4-х ядерного процессора в данном случае будет
                    слишком оптимистичным, а вот 24-ядерный вариант вполне подойдет. Также
                    желательно подсчитать число одновременно активных запросов, так как соединения
                    могут простаивать, не выполняя никаких SQL запросов. <tip>
                        <para>Для грубой оценки необходимого количества ядер в CPU можно
                            пользоваться правилом от 10 до 30 соединений на 1 ядро. 10
                            пользователей/ядро – приложение с преобладанием сложных и медленных
                            запросов, 30 соединений/ядро – приложение с преобладанием простых,
                            хорошо отлаженных запросов. Для более точной оценки можно посмотреть на
                            закладке Statements число активных запросов (состояние Active) и всех
                            остальных (IDLE И др.) </para>
                    </tip>
                </para>
            </section>

            <section>
                <title>Версия и архитектура Firebird</title>

                <para>Если Вы используете версию Firebird 2.5, то следует иметь в виду, что для
                    распараллеливания обработки на несколько ядер следует использовать архитектуры
                    Classic или SuperClassic. Архитектура SuperServer в версии 2.5 может
                    использовать только одно ядро на одну БД, поэтому ее не следует применять в
                    высоконагруженных системах.</para>

                <para>В версии Firebird 3.0 и SuperServer, и Classic, и SuperClassic используют
                    возможности многоядерных CPU. Наибольшую производительность показывает Firebird
                    3.0 SuperServer.</para>
            </section>
        </section>

        <section>
            <title>RAM</title>

            <para>При выборе RAM следует уделить внимание 2 моментам:<orderedlist>
                    <listitem>
                        <para>Модули памяти должны быть с коррекцией ошибок (ECC RAM)</para>
                    </listitem>
                    <listitem>
                        <para>Правильно рассчитать объем RAM</para>
                    </listitem>
                </orderedlist></para>

            <section>
                <title>ECC RAM</title>

                <para>ECC RAM значительно снижает количество ошибок при работе с памятью и
                    настоятельно рекомендуется для использования в промышленных системах.</para>
            </section>

            <section>
                <title>Расчет необходимого объема RAM</title>

                <para>Для расчета памяти нам придется немного углубиться в особенности различных
                    архитектур Firebird.</para>
                <para>Firebird 2.5 архитектуры Classic и Firebird 3.0 Classic запускают отдельный
                    процесс для обслуживания каждого соединение, SuperClassic запускает отдельный
                    поток для каждого соединения, но практически с той же структурой потребления
                    памяти – каждое соединение имеет свой независимый страничный кэш.</para>
                <para>Firebird SuperServer запускает один процесс с единым страничным кэшем для всех
                    соединений.</para>
                <para>Таким образом, потребление памяти складывается из следующих основных параметров:<orderedlist>
                        <listitem>
                            <para>Количество соединений</para>
                        </listitem>
                        <listitem>
                            <para>Размер страницы базы данных</para>
                        </listitem>
                        <listitem>
                            <para>Размер объектов метаданных (пропорционален количеству таблиц,
                                триггеров, хранимых процедур и др., не регулируется, определяется по
                                фактическому использованию)<itemizedlist>
                                    <listitem>
                                        <para>Для Classic и SuperClassic – на соединение</para>
                                    </listitem>
                                    <listitem>
                                        <para>Для SuperServer – на экземпляр открытой базы
                                            данных</para>
                                    </listitem>
                                </itemizedlist></para>
                        </listitem>
                        <listitem>
                            <para>Размер страничного кэша (определяется параметрами в заголовке БД
                                или в firebird.conf или в свойствах конкретного соединения)<itemizedlist>
                                    <listitem>
                                        <para>Для Classic и SuperClassic – на соединение</para>
                                    </listitem>
                                    <listitem>
                                        <para>Для SuperServer – на экземпляр открытой базы
                                            данных</para>
                                    </listitem>
                                </itemizedlist></para>
                        </listitem>
                        <listitem>
                            <para>Размер кэша для сортировок (определяется параметром в
                                    firebird.conf<emphasis role="italic">) </emphasis>Обратите
                                внимание, что память для сортировок выделяется по мере
                                необходимости, а не сразу же.<itemizedlist>
                                    <listitem>
                                        <para>Для Classic – на соединение</para>
                                    </listitem>
                                    <listitem>
                                        <para>Для Super Serverи SuperClassic – на процесс (т.е., кэш
                                            сортировок единый)</para>
                                    </listitem>
                                </itemizedlist></para>
                        </listitem>
                        <listitem>
                            <para>Для Classic/SuperClassic – размер таблицы блокировок (так как
                                обычно он небольшой, то его выведем из расчетов).</para>
                        </listitem>
                    </orderedlist></para>

                <para>Компанией IBSurgeon в ряде экспериментов получен ряд оптимальных значений
                    количества страниц в страничном кэше Firebird:<itemizedlist>
                        <listitem>
                            <para>Classic/SuperClassic – от 256 до 2000 страниц</para>
                        </listitem>
                        <listitem>
                            <para>SuperServer 2.5 – 10000 страниц</para>
                        </listitem>
                        <listitem>
                            <para>SuperServer 3.0 – 100000 страниц</para>
                        </listitem>
                    </itemizedlist></para>

                <para>На основании этих экспериментов были созданы оптимизированные конфигурационные
                    файлы Firebird для серверов с 4-6Гб памяти, вы можете скачать их отсюда: <link
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        xlink:href="http://ib-aid.com/ru/optimized-firebird-configuration/"
                        >http://ib-aid.com/ru/optimized-firebird-configuration/</link></para>

                <section>
                    <title>Формулы расчета необходимого объема RAM</title>

                    <para>Ниже представлены формулы приблизительного расчета необходимого объема
                        памяти для Firebird. Реальное значение потребления памяти может отличаться,
                        так как в этом расчете не учитывается объем памяти под метаданные, под
                        битовые маски индексов, и т.д., что может увеличить расход памяти, но
                        одновременно предполагается, что память под сортировки будет использована
                        полностью во всех соединениях, чего обычно не происходит.</para>

                    <para>Когда база данных уже находится в эксплуатации, можно просто посмотреть
                        средний размер памяти, используемый процессом Firebird (с помощью
                        TaskManager или ProcessExplorer).</para>

                    <formalpara>
                        <title>Расчет для Classic:</title>
                        <para>
                            <programlisting> 
<replaceable>Кол-во соединений</replaceable> * ((<replaceable>Кол-во страниц кэша</replaceable> * <replaceable>Размер страницы</replaceable>) + <replaceable>Размер кэша для сортировок</replaceable>)
                        </programlisting>
                        </para>
                    </formalpara>

                    <para>Пример для Classic: пусть мы ожидаем 100 активных пользователей, размер
                        страницы БД мы установили в 8Кб, а количество страниц в страничном кэше
                        установили в 256, размер кэша для сортировок увеличили с 8Мб (значение по
                        умолчанию для Classic и SuperClassic) до 64Мб:
                        <programlisting> 
100*((256*8кб)+64 Мб) = 6600 Мб
                </programlisting>
                    </para>

                    <formalpara>
                        <title>Расчет для SuperClassic:</title>
                        <para>
                            <programlisting> 
<replaceable>Кол-во соединений</replaceable> * (<replaceable>Кол-во страниц кэша</replaceable> * <replaceable>Размер страницы</replaceable>) + <replaceable>Размер кэша для сортировок</replaceable>
                        </programlisting>
                        </para>
                    </formalpara>


                    <para>Пример для SuperClassic: 100 пользователей, размер страницы БД 8Кб,
                        количество страниц в страничном кэше 256, размер кэша для сортировок 1024 Мб
                        <programlisting> 
100*(256*8Кб) + 1024 Мб = 2024 Мб
                </programlisting>
                    </para>

                    <formalpara>
                        <title>Расчет для SuperServer:</title>
                        <para>
                            <programlisting> 
<replaceable>Кол-во страниц кэша</replaceable> * <replaceable>Размер страницы</replaceable> + <replaceable>Размер кэша для сортировок</replaceable>
                        </programlisting>
                        </para>
                    </formalpara>

                    <para>Пример для SuperServer (Firebird 2.5): 1БД, 100 пользователей, размер
                        страницы БД 8кб, количество страниц в страничном кэше 10000, размер кэша для
                        сортировок 1024 Мб:
                        <programlisting> 
(10000*8Кб) + 1024 = 1102 Мб
                </programlisting>
                    </para>

                    <para>Пример для SuperServer (Firebird 3.0): 1 БД, 100 пользователей, размер
                        страницы БД 8кб, количество страниц в страничном кэше 100000, размер кэша
                        для сортировок 1024 Мб:
                        <programlisting> 
(100000*8Кб) + 1024 = 1805 Мб
                </programlisting>
                    </para>
                </section>

                <section>
                    <title>Излишняя память</title>

                    <para>Часто Firebird упрекают в неэффективном использовании памяти, когда
                        работающий процесс сервера потребляет небольшое количество RAM, а остающаяся
                        память якобы не используется.</para>
                    <para>На самом деле это неверное суждение, происходящее, в основном, из-за
                        непонимания работы механизма кэширования Firebird и несовершенства
                        инструментов мониторинга операционных систем. </para>
                    <para>Прежде всего, необходимо четко представлять, что Firebird активно
                        использует файловый кэш операционной системы. Когда страница загружается в
                        страничный кэш Firebird, она проходит через файловый кэш ОС. Когда Firebird
                        выгружает страницу из своего страничного кэша, операционная система при
                        наличии свободной памяти продолжает держать этот кусок базы данных в RAM. <figure>
                            <title>Cache levels: Firebird, OS and storage</title>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="images/04-cache-levels.png"/>
                                </imageobject>
                                <textobject>
                                    <phrase>Cache levels: Firebird, OS and storage</phrase>
                                </textobject>
                            </mediaobject>
                        </figure>
                    </para>
                    <para>Однако, при поверхностном взгляде, операционная система не показывает
                        занятую под файловую кэш память как используемую. Например, вот типичная
                        ситуация распределения памяти при работающем сервер Firebird, как ее
                        показывает TaskManager: <figure>
                            <title>TaskManager does not show file cache usage</title>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="images/05-taskmanager.png" width="680"/>
                                </imageobject>
                                <textobject>
                                    <phrase>TaskManager does not show file cache usage</phrase>
                                </textobject>
                            </mediaobject>
                        </figure>
                    </para>
                    <para>Выглядит так, как будто используется только 6.3Гб из 16Гб.</para>
                    <para>Однако, если использовать инструмент RAMMap (из набора утилит SysInternals
                        от Microsoft), то картина выглядит более логичной: <figure>
                            <title>RAMMap shows details about memory usage: mapped files are cached
                                databases</title>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="images/06-rammap.png" width="680"/>
                                </imageobject>
                                <textobject>
                                    <phrase>RAMMap shows details about memory usage: mapped files
                                        are cached databases</phrase>
                                </textobject>
                            </mediaobject>
                        </figure>
                    </para>
                    <para>Файлы баз данных (dbw350_fb252x64.fdb и dbw250_fb252x64.fdb) закэшированы
                        ОС, и занимают всю память, декларированную TaskManager как свободную: <figure>
                            <title>RAMMap: details about file cache usage</title>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="images/07-rampam-detail.png" width="680"/>
                                </imageobject>
                                <textobject>
                                    <phrase>RAMMap: details about file cache usage</phrase>
                                </textobject>
                            </mediaobject>
                        </figure>
                    </para>
                    <para>Отсюда вывод — операционная система эффективно использует всю доступную
                        память для кэширования базы данных, вплоть до полной загрузки БД в
                        память.</para>
                </section>
            </section>
        </section>

        <section>
            <title>Дисковая подсистема</title>

            <para>Правильная конфигурация дисковой подсистемы является очень важной частью выбора и
                конфигурирования нardware для Firebird, так как ошибки на этом этапе дорого
                обходятся и тяжело исправляются.</para>

            <section>
                <title>Отдельные диски для всего</title>

                <para>Чтобы уменьшить конкуренцию за дисковый ввод-вывод между операциями с файлом
                    БД, сортировками и резервными копиями, а также уменьшить шанс одновременной
                    потери и БД и резервных копий, рекомендуется иметь 3 разных диска (или
                    raid-массива): для БД, для временных файлов и для создания и хранения
                    бэкапов.</para>

                <para>Когда мы говорим «отдельные диски», это означает, что физически потоки данных
                    должны идти через разные каналы ввода-вывода. Если создать 3 логических диска на
                    одном физическом диске, никакого улучшения производительности не произойдет.
                    Однако, если 3 логических диска будут организованы на устройстве хранения данных
                    (СХД), оснащенном многоканальными контроллерами, то производительность, скорее
                    всего, возрастет, так как устройство может распределять потоки данных между
                    контроллерами.</para>

                <para>Иногда сообщают о том, что выделение отдельного диска для хранения файлов ОС и
                    swap-файла ОС приводит к увеличению производительности.</para>
            </section>

            <section>
                <title>SSD для базы данных</title>

                <para>Для работы с базой данных лучше всего использовать SSD-диски, так как они
                    обеспечивают отличное масштабирование при параллельном вводе-выводе. Обязательно
                    следует использовать диски промышленного класса, с увеличенным числом циклов
                    перезаписи, иначе велик риск потери данных из-за поломки SSD.</para>

                <para>Некоторое время назад SSD-диски страдали от повышенного износа в случае, если
                    на диске оставалось небольшое количество (менее 30%) свободного места. Упрощенно
                    излагая, каждое изменение на SSD диске пишется в новую свободную ячейку, поэтому
                    недостаток свободного места приводил к повышенному износу ячеек, которые
                    остались свободными, и сокращению срока жизни диска.</para>

                <para>Производители современных контроллеров SSD декларируют, что эта проблема была
                    решена с помощью превентивного перемещения статичных данных, и теперь износ
                    ячеек идет более или менее равномерно. Однако, точные спецификации и алгоритмы
                    работы SSD закрыты производителями, поэтому мы все равно рекомендуем оставлять
                    до 30% места на SSD-дисках свободным, а ожидаемый срок жизни занижать и
                    планировать замену дисков не реже чем 1 раз в 3 года.</para>

                <informalexample>
                    <para>Например, если размер Вашей БД в данный момент составляет 100Гб, рост БД
                        идет по 1Гб в месяц, то нельзя приобретать SSD минимального размера (120Гб),
                        а лучше выбрать следующий в линейке — 250Гб. В тоже время, покупка 512Gb SSD
                        будет пустой тратой денег, т.к. через 3 года диск будет желательно
                        заменить.</para>
                </informalexample>

                <para>Наилучшим выбором является использование SSD эксклюзивно для работы с базой
                    данных, так как любые операции ввода-вывода сокращают срок службы дисков.</para>
            </section>

            <section>
                <title>Диск для временных файлов</title>

                <para>Так как временные файлы на диске возникают только при отсутствии достаточного
                    количества RAM, то конечно, лучше всего вообще избегать их появления на диске.
                    Оценку количества и размера временных файлов в production системе можно провести
                    лишь путем мониторинга папки с временными файлами. Такой мониторинг осуществляет
                        <application>FBDataGuard</application> из дистрибутива HQbird. Узнав,
                    сколько временных файлов сортировок и когда создается на диске, можно
                    соответствующим образом нарастить RAM и изменить параметры
                        <filename>firebird.conf</filename>.</para>

                <para>В любом случае, Firebird требует указания папки, где будут хранится временные
                    файлы. Обычно его оставляют по умолчанию, т.е. используется папка ОС для
                    временных файлов. В случае, если свободной RAM достаточно, это достаточно
                    хороший выбор.</para>

                <para>Однако, есть еще один важный момент в размещении временных файлов на диске –
                    это создание индексов при восстановлении верифицированного бэкапа (созданного
                    утилитой <application>gbak</application>). При создании индекса создается
                    временный файл, который содержит все ключи этого индекса. Если база данных
                    достаточно велика, то размер индекса для какой-нибудь большой таблицы может быть
                    также значительным. Например, в БД размером 1 Тб индекс для самой большой
                    таблицы в 3.2 миллиардов записей в базе данных имеет размер 29 Гб, а при
                    создании такого индекса потребовалось 180 гигабайт свободного места: <figure>
                        <title>IBAnalyst: tables and indexes</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/08-ibanalyst.png" width="680"/>
                            </imageobject>
                            <textobject>
                                <phrase>IBAnalyst: tables and indexes</phrase>
                            </textobject>
                        </mediaobject>
                    </figure>
                </para>
                <para>Чтобы предупредить исчерпание свободного места на системном диске, в
                    Firebird.conf указывают второй диск в качестве дополнительного резервного места:
                    <programlisting> 
TempDirectories = C:\temp; H:\Temp
                </programlisting>
                </para>
                <para>Если на первом диске пространство кончится, Firebird продолжит использовать
                    для временных файлов второй диск, и так далее.</para>
            </section>

            <section>
                <title>HDD for backups</title>

                <para>Для создания и хранения бэкапов подойдут обычные HDD диски с интерфейсом SATA
                    или nSAS. Они обеспечивают быструю линейную запись и чтение файлов бэкапа, и
                    достаточно дешевы, чтобы не экономить на их размере, и хранить несколько
                    резервных копий.</para>

                <para>Для создания и хранения бэкапов подойдут обычные HDD диски с интерфейсом SATA
                    или nSAS. Они обеспечивают быструю линейную запись и чтение файлов бэкапа, и
                    достаточно дешевы, чтобы не экономить на их размере, и хранить несколько
                    резервных копий.</para>

                <para>Если же удалять предыдущий бэкап до окончания процесса создания нового,
                    возможна ситуация, что в результате сбоя копирования новый бэкап не будет
                    создан, старый уже удален, а база данных также повреждена, например, в
                    результате сбоя диска.</para>

                <para>Если Вы используете рекомендованный выше способ организации резервного
                    копирования в виде комбинации инкрементального бэкапа в 3 уровнях и
                    верифицированного бэкапа один раз в сутки, хранением только 1 последней копии,
                    то формула расчета минимального необходимого места для бэкапа следующая:
                    <programlisting> 
<replaceable>Размер_БД</replaceable> * 3 + 0.2 * <replaceable>Размер_БД</replaceable>
                </programlisting>
                </para>

                <formalpara>
                    <title>Пример расчета места, необходимого для бэкапа</title>

                    <para>Пусть у нас есть БД в 100Гб, для которой мы храним 3 уровня
                        инкрементального бэкапа неделя-день-час (по 1 копии) и 1 копию ежедневного
                        верифицировованного бэкапа. Тогда резервные копии будут занимать следующее
                        место: <itemizedlist>
                            <listitem>
                                <para>Nbackup_level_0_weekly - 100Гб</para>
                            </listitem>
                            <listitem>
                                <para>Nbackup_level_1_daily – 5Гб (приблизительная оценка)</para>
                            </listitem>
                            <listitem>
                                <para>Nbackup_level_2_hourly – 200 Мб (приблизительная
                                    оценка)</para>
                            </listitem>
                            <listitem>
                                <para>Daily verified backup – 100Гб (приблизительная оценка)</para>
                            </listitem>
                            <listitem>
                                <para>Плюс нужен резерв в 110Гб для создания следующей копии
                                    бэкапа.</para>
                            </listitem>
                        </itemizedlist> Итого – 316Гб. </para>
                </formalpara>
                <important>
                    <para>Размер инкрементного файла уровня 1 и выше зависит от количества страниц,
                        которые были изменены с момента предыдущего выполнения nbackup. Определить
                        размер этих файлов можно только экспериментально, т.к. объем изменений в БД
                        зависит от приложений. </para>
                </important>
                <note>
                    <para>Разумеется, интеллектуальные средства резервного копирования (FBDataGuard
                        из HQbird), отследят недостаток места для бэкапов, предотвратят старт
                        неудачного бэкапа и вышлют соответствующее сообщение администратору.</para>
                </note>
            </section>

            <section>
                <title>HDD для базы данных</title>

                <para>Может случиться так, что SSD окажется слишком дорогим решением, или размер БД
                    слишком велик, и необходимо обойтись более дешевыми альтернативами.</para>

                <para>В этом случае следует использовать HDD с интерфейсом SAS, при невозможности —
                    диски SATA с интерфейсом nSAS, и совсем бюджетный вариант — обычные диски
                    SATA.</para>

                <para>Для ускорения работы жестких дисков (а также, надежности – см. ниже) следует
                    объединять их в RAID10. RAID10 – это комбинация зеркалирования (RAID1) и stripe
                    (RAID0). Хороший и правильно настроенный RAID контроллер с большим кэшем
                    является неплохой альтернативой SSD.</para>
            </section>

            <section>
                <title>Надежность и RAID</title>

                <para>Разумеется, во всех упомянутых выше вариантах (за исключением диска,
                    выделенного эксклюзивно для временных файлов) следует увеличивать надежность
                    дисковой подсистемы путем объединения дисков в RAID. </para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>Для SSD дисков следует обязательно использовать RAID1 – т.е. 2
                                «зеркальных» диска, на которые одновременно пишутся изменения, что
                                значительно уменьшит шанс полной потери данных. RAID 10 из SSD
                                скорее всего будет избыточным, т.к. шина RAID будет ограничивать
                                пропускную способность. Например, интерфейс 6 Гбит/с имеет
                                пропускную способность в 600 мегабайт в секунду, а современные
                                одиночные SSD уже достигли такой скорости. Таким образом, для RAID
                                10 мы получим тот же самый лимит в 600 мб/с. Разве что с PCI Express
                                3.0 можно организовывать RAID 10 из SSD, т.к. пропускная способность
                                этой шины уже 16 гигабит в секунду и выше. </para>
                        </listitem>
                        <listitem>
                            <para>Для HDD дисков, используемых для бэкапов, достаточно использовать
                                RAID1, который обеспечит надежное хранение бэкапов и приемлемую
                                скорость записи и чтения.</para>
                        </listitem>
                        <listitem>
                            <para>HDD диски, используемые для БД, необходимо объединять в RAID10
                                (минимум 4 диска), который обеспечит оптимальное сочетание
                                стоимости, надежности и производительности. Некоторые пользователи
                                используют также RAID5, жертвуя производительностью взамен
                                увеличенного пространства.</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>

            <section>
                <title>Настройка RAID</title>

                <para>Прежде всего, необходимо проверить наличие и заряд батареи резервного питания
                    (Backup Battery Unit, BBU) в RAID. При отсутствии данной батареи большинство
                    RAID переходят в режим безопасной записи (полностью отключено кэширование
                    записи), который обеспечивает меньшую скорость IO, чем обычный SATA диск!</para>

                <note>
                    <para>Именно с этим фактом связано большинство горестных писем в техподдержку от
                        пользователей, которые приобрели дорогой сервер и обнаружили, что он
                        работает медленнее, чем десктопный компьютер. К сожалению, часть вендоров по
                        умолчанию не снабжает свои RAID батареями, поэтому это первое, что
                        необходимо проверить и, при необходимости, исправить.</para>
                </note>

                <para>Затем необходимо провести настройку кэширования чтения и записи. Часто по
                    умолчанию кэш полностью выключен, а если мы хотим добиться приличной скорости от
                    RAID, то кэш необходимо включить.</para>

                <para>Кроме включения кэша, необходимо проверить режим его работы, это может быть
                    write through и write back. Быстрый способ работы с кэшем – write back, в этом
                    случае изменения пишутся в кэш контроллера, и через некоторое время –
                    непосредственно на диск. </para>

                <para>Проверка наличия батареи, кэша и режима работы RAID может быть осуществлена в
                    фирменных утилитах, которые производители поставляют вместе с RAID.</para>

                <para>Современные RAID-контроллеры также имеют возможности тонкой настройки кэша —
                    его можно ориентировать на чтение или на запись. Обычно по умолчанию стоит
                    50%/50% на чтение-запись.</para>

                <para>Чтобы определить, в каком отношении стоит настраивать кэш, можно вновь
                    воспользоваться инструментом MON$ Logger из продвинутого дистрибутива HQbird.
                    Она показывает отношение числа операций чтения к операциям записи (в
                    агрегированном виде с момента первого соединения к серверу): <figure>
                        <title>HQbird MON$logger: reads/write ratio</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/09-hqbird_monlogger.png" width="680"/>
                            </imageobject>
                            <textobject>
                                <phrase>HQbird MON$logger: reads/write ratio</phrase>
                            </textobject>
                        </mediaobject>
                    </figure>
                </para>

                <para>Как видите, в данном примере операций чтения гораздо больше, чем операций
                    записи, поэтому имеет смысл настроить RAID контроллер на 80% чтений и 20%
                    записи.</para>
            </section>

            <section>
                <title>СХД</title>

                <para>В последние годы получили распространение интегрированные системы хранения
                    данных (СХД), которые включают в себя массив дисков с гибкими возможностями
                    конфигурации (все типы RAID) и продвинутым кэшированием. Обычно СХД имеют
                    несколько контроллеров ввода-вывода, что позволяет обслуживать несколько
                    серверов одновременно, а также работать достаточно быстро. </para>
                <para>Многие организации приобретают СХД и используют их для работы с базами данных
                    Firebird. При условии правильной настройки от СХД можно добиться очень хорошей
                    производительности. Основные моменты, которые нужно учитывать при использовании СХД:<orderedlist>
                        <listitem>
                            <para>Наличие нескольких высокопроизводительных контроллеров дисков,
                                обеспечивающих многоканальный обмен данными</para>
                        </listitem>
                        <listitem>
                            <para>Наличие батарей резервного питания (BBU), если они предусмотрены
                                конструкцией.</para>
                        </listitem>
                        <listitem>
                            <para>Диски для баз данных должны быть организованы в RAID10.</para>
                        </listitem>
                        <listitem>
                            <para>Кэш должен быть включен, режим записи установлен в write
                                back.</para>
                        </listitem>
                        <listitem>
                            <para>Если к СХД подключены несколько компьютеров, то каждый из них
                                обслуживается своим контроллером. </para>
                        </listitem>
                        <listitem>
                            <para>Установлены свежие драйвера для СХД. В нашей практике были случаи,
                                когда более новые драйвера обеспечивали 30% прирост скорости.</para>
                        </listitem>
                        <listitem>
                            <para>Если на СХД созданы несколько логических дисков (для БД, бэкапов,
                                ОС), то они разделены по каналам ввода вывода. Попытка использовать
                                один канал для всех дисков сразу приведет к снижению
                                производительности.</para>
                        </listitem>
                        <listitem>
                            <para>Аналогично, если СХД будут использовать сразу несколько серверов и
                                БД, производительность может уменьшиться из-за превышения полосы
                                пропускания (bandwidth) контроллеров ввода-вывода.</para>
                        </listitem>
                        <listitem>
                            <para>Часто используются комбинированные схемы, когда ОС и временные
                                файлы находятся на локальных дисках, а база данных и бэкапы на
                                СХД.</para>
                        </listitem>
                    </orderedlist></para>
                <para>Часто СХД используются в схеме «2 сервера – 1 СХД», с целью построения
                    отказоустойчивого кластера. Надо отметить, что такой кластер поможет победить
                    только проблемы, связанные непосредственно с поломкой hardware одного из
                    серверов, чтобы быстро переключиться на второй сервер. Если проблема возникнет с
                    СХД или с самой базой данных, то такое решение будет бесполезно.</para>
                <para>Для построения реального отказоустойчивого решения необходимо использовать
                    решения с репликацией данных между экземплярами баз данных. Такие решения
                    доступны для Firebird 2.5 и 3.0.Вы можете обратиться на support@ib-aid.com,
                    чтобы узнать больше о решениях высокой доступности для Firebird.</para>
            </section>
        </section>
    </section>
    <section>
        <title>Краткие выводы и рекомендации</title>
        
        <para>Давайте коротко суммируем выводы и рекомендации по hardware для Firebird.</para>
        
        <para>
            <orderedlist>
                <listitem>
                    <para>Необходимо использовать многоядерные CPU для обслуживания большого
                        количества пользователей</para>
                </listitem>
                <listitem>
                    <para>Оперативная память RAM – обязательное минимальное количество
                        рассчитывается из количества пользователей и параметров БД, количество сверх
                        того будет эффективно использоваться операционной системой для кэширования
                        файла БД.</para>
                </listitem>
                <listitem>
                    <para>Использовать отдельные диски для БД, temp-файлов и бэкапов</para>
                </listitem>
                <listitem>
                    <para>Для размещения БД лучше использовать SSD диски.<itemizedlist>
                            <listitem>
                                <para>Резервировать от 30% свободного места на SSD дисках.</para>
                            </listitem>
                            <listitem>
                                <para>Желательно эксклюзивно использовать диск под БД.</para>
                            </listitem>
                            <listitem>
                                <para>Использовать SSD промышленного класса (с большим количеством
                                    циклов перезаписи).</para>
                            </listitem>
                        </itemizedlist></para>
                </listitem>
                <listitem>
                    <para>Обязательно использовать RAID.<itemizedlist>
                            <listitem>
                                <para>Для SSD – RAID 1, для HDD – RAID10, для HDD под бэкапы –
                                    RAID1.</para>
                            </listitem>
                            <listitem>
                                <para>Обязательно проверять наличие и заряд батареи RAID</para>
                            </listitem>
                            <listitem>
                                <para>Обязательно проверять настройку write back/through (нужно
                                    ставить write back).</para>
                            </listitem>
                            <listitem>
                                <para>Ряд контроллеров имеет настройку размера кэша RAID, например,
                                    75% для чтения, 25% для записи, или 50/50, и т.д. Необходимо
                                    ставить Mon$logger, ПО для управления параметрами RAID, смотреть
                                    соотношение чтения и записи, и менять настройки RAID. </para>
                            </listitem>
                            <listitem>
                                <para>В использовании СХД есть свои плюсы и минусы, чтобы получить
                                    эффект от ее использования, необходимо правильно настраивать
                                    СХД.</para>
                            </listitem>
                        </itemizedlist></para>
                </listitem>
                <listitem>
                    <para>Для построения отказоустойчивого решения необходимо использовать решения с
                        репликацией, работающие на нескольких серверах.</para>
                </listitem>
            </orderedlist>
        </para>
    </section>

</chapter>
